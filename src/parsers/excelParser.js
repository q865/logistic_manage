/**
 * –ü–∞—Ä—Å–µ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–∑–∞—Ö, –∑–∞–∫–∞–∑–∞—Ö –∏ –¥–æ—Å—Ç–∞–≤–∫–µ
 */

export class ExcelParser {
  /**
   * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≥—Ä—É–∑–µ
   * @param {string} cargoData - —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≥—Ä—É–∑–µ
   * @returns {Object|null} - –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≥—Ä—É–∑–µ –∏–ª–∏ null
   */
  static parseCargo(cargoData) {
    const match = cargoData.match(/(\d+\.?\d*)\s*–∫—É–±\.–º\/(\d+)\s*–∫–≥\/(\d+\.?\d*)\s*–º\/([^/]+)/);
    
    if (!match) return null;
    
    return {
      volume: parseFloat(match[1]),
      weight: parseInt(match[2]),
      length: parseFloat(match[3]),
      additionalInfo: match[4]
    };
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–∫–∞–∑–µ –∏ –∫–ª–∏–µ–Ω—Ç–µ
   * @param {string} orderData - —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–∫–∞–∑–µ
   * @returns {Object|null} - –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–∫–∞–∑–µ –∏–ª–∏ null
   */
  static parseOrder(orderData) {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    const normalizedData = orderData.replace(/\\\./g, '.');
    
    // –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –≤—Ä–µ–º—è
    const orderMatch = normalizedData.match(/(\d+)\.–ó–∞–∫–∞–∑–∞–Ω–æ\.(\d{2})\.(\d{2})\.(\d{4})\s+(\d{2}:\d{2}:\d{2})/);
    if (!orderMatch) return null;
    
    // –ü–∞—Ä—Å–∏–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
    const nameMatch = normalizedData.match(/–ó–∞–∫–∞–∑–∞–Ω–æ\.\d{2}\.\d{2}\.\d{4}\s+\d{2}:\d{2}:\d{2}\.([–ê-–Ø–∞-—è\s]+?)\.{8,}/);
    if (!nameMatch) return null;
    
    // –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    const deliveryMatch = normalizedData.match(/\.{8,}(\d{2})\.(\d{2})\.(\d{4})\s+(\d{2}:\d{2}:\d{2})\.\.(\d+)/);
    if (!deliveryMatch) return null;
    
    return {
      orderNumber: orderMatch[1],
      orderDate: `${orderMatch[2]}.${orderMatch[3]}.${orderMatch[4]}`,
      orderTime: orderMatch[5],
      customerName: nameMatch[1].trim(),
      deliveryDate: `${deliveryMatch[1]}.${deliveryMatch[2]}.${deliveryMatch[3]}`,
      deliveryTime: deliveryMatch[4],
      deliveryId: deliveryMatch[5]
    };
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
   * @param {Array} rowData - –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∏–∑ Excel
   * @returns {Object|null} - –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ null
   */
  static parseRow(rowData) {
    if (!Array.isArray(rowData) || rowData.length < 4) {
      return null;
    }

    const [routeInfo, cargoData, orderData, companyInfo] = rowData;
    
    // –ü–∞—Ä—Å–∏–º –≥—Ä—É–∑
    const cargo = this.parseCargo(cargoData);
    if (!cargo) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–µ:', cargoData);
      return null;
    }
    
    // –ü–∞—Ä—Å–∏–º –∑–∞–∫–∞–∑
    const order = this.parseOrder(orderData);
    if (!order) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ:', orderData);
      return null;
    }
    
    // –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
    const route = this.parseRoute(routeInfo);
    
    return {
      route,
      cargo,
      order,
      company: companyInfo,
      rawData: rowData
    };
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
   * @param {string} routeInfo - —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ä—à—Ä—É—Ç–µ
   * @returns {Object} - –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ
   */
  static parseRoute(routeInfo) {
    // –§–æ—Ä–º–∞—Ç: "01.09.25_77_00—á_–í–ò–ü_19"
    const parts = routeInfo.split('_');
    
    if (parts.length >= 4) {
      return {
        date: parts[0],
        region: parts[1],
        time: parts[2],
        type: parts[3],
        number: parts[4] || null
      };
    }
    
    return {
      raw: routeInfo
    };
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @param {Object} parsedData - —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns {boolean} - true –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã
   */
  static validate(parsedData) {
    if (!parsedData) return false;
    
    const required = ['cargo', 'order'];
    for (const field of required) {
      if (!parsedData[field]) return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≥—Ä—É–∑–∞
    if (!parsedData.cargo.volume || !parsedData.cargo.weight) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–∫–∞–∑–∞
    if (!parsedData.order.orderNumber || !parsedData.order.customerName) return false;
    
    return true;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
   * @param {Object} parsedData - —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns {string} - –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
   */
  static format(parsedData) {
    if (!this.validate(parsedData)) {
      return '‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã';
    }
    
    const { route, cargo, order } = parsedData;
    
    return `üì¶ **–ó–∞–∫–∞–∑ ‚Ññ${order.orderNumber}**
üë§ **–ö–ª–∏–µ–Ω—Ç**: ${order.customerName}
üìÖ **–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞**: ${order.orderDate} ${order.orderTime}
üöö **–î–æ—Å—Ç–∞–≤–∫–∞**: ${order.deliveryDate} ${order.deliveryTime}
üìè **–ì—Ä—É–∑**: ${cargo.volume} –∫—É–±.–º, ${cargo.weight} –∫–≥, ${cargo.length} –º
üìç **–ú–∞—Ä—à—Ä—É—Ç**: ${route.date} ${route.region} ${route.time}`;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export default ExcelParser;
