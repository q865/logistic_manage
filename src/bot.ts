
// src/bot.ts
import 'dotenv/config';
import fs from 'fs/promises';
import path from 'path';
import { Bot, InlineKeyboard, InputFile } from 'grammy';
import { DriverService } from './services/driverService.js';
import { ScheduleService } from './services/scheduleService.js';
import { DeliveryService } from './services/deliveryService.js';
import { ExcelProcessingService } from './services/excelProcessingService.js';
import { generateLeaseAgreement } from './services/documentService.js';
import { notificationService } from './services/notificationService.js';
import type { Driver } from './models/Driver.js';
import type { Delivery } from './models/Delivery.js';

const PAGE_LIMIT = 5;
const INSTRUCTIONS_DIR = path.resolve(process.cwd(), 'instructions');
const WEBAPP_URL = process.env.WEBAPP_URL || 'http://localhost:5173';

// --- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π ---
const instructions = {
  'company_rules': 'üìú –ü—Ä–∞–≤–∏–ª–∞ –∫–æ–º–ø–∞–Ω–∏–∏',
  'document_handling': 'üìë –†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏',
  'route_difficulties': 'üöß –°–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ',
  'general_info': '‚ÑπÔ∏è –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
};

// –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
export function createBot(token: string, driverService: DriverService, scheduleService: ScheduleService) {
  const bot = new Bot(token);
  const deliveryService = new DeliveryService();
  const excelProcessingService = new ExcelProcessingService();

  // --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é ---
  bot.api.setMyCommands([
    { command: 'start', description: 'üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–ø—Ä–∞–≤–∫–∞' },
    { command: 'drivers', description: 'üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π' },
    { command: 'schedule', description: 'üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã' },
    { command: 'current', description: 'üöó –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã' },
    { command: 'deliveries', description: 'üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏' },
    { command: 'excel', description: 'üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–æ–≤' },
    { command: 'stats', description: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫' },
    { command: 'webapp', description: 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-—Ñ–æ—Ä–º—É' },
    { command: 'instructions', description: 'üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π' },
  ]);

  // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
  const formatDriverDetails = (driver: Driver): string => {
    return `**üë§ –í–æ–¥–∏—Ç–µ–ª—å ID: ${driver.id}**\n` +
           `*–§–ò–û:* ${driver.personalData.lastName} ${driver.personalData.firstName} ${driver.personalData.patronymic || ''}\n` +
           `*–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${new Date(driver.personalData.birthDate).toLocaleDateString('ru-RU')}\n\n` +
           `**üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å**\n` +
           `*–ú–∞—Ä–∫–∞/–ú–æ–¥–µ–ª—å:* ${driver.vehicle.make} ${driver.vehicle.model}\n` +
           `*–ì–æ—Å. –Ω–æ–º–µ—Ä:* ${driver.vehicle.licensePlate}`;
  };

  const createDriversListMessage = async (page = 1) => {
    const { drivers, total } = await driverService.getAllDrivers({ page, limit: PAGE_LIMIT });
    const totalPages = Math.ceil(total / PAGE_LIMIT) || 1;
    let text = `**–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages})**\n\n`;
    if (total === 0) {
      text = '–í–æ–¥–∏—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.';
    } else {
      text += drivers.map(d => 
        `*ID:* ${d.id} | *–§–ò–û:* ${d.personalData.lastName} ${d.personalData.firstName}\n` +
        `*–ê–≤—Ç–æ:* ${d.vehicle.make} ${d.vehicle.model} (${d.vehicle.licensePlate})`
      ).join('\n--------------------\n');
    }
    const keyboard = new InlineKeyboard();
    if (page > 1) keyboard.text('‚óÄÔ∏è –ù–∞–∑–∞–¥', `drivers_page_${page - 1}`);
    if (page < totalPages) keyboard.text('–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', `drivers_page_${page + 1}`);
    return { text, keyboard };
  };

  const getInstructionsMenu = () => {
    const keyboard = new InlineKeyboard();
    for (const key in instructions) {
      keyboard.text(instructions[key as keyof typeof instructions], `instruction_${key}`).row();
    }
    return {
      text: 'üìö **–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:',
      keyboard,
    };
  };

  // --- –ö–æ–º–∞–Ω–¥—ã ---
  bot.command(['start', 'help'], (ctx) => {
    const keyboard = new InlineKeyboard()
      .text('üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π', 'drivers_page_1').row()
      .text('üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã', 'schedule_current').row()
      .text('üöó –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã', 'current_trips').row()
      .text('üìä Excel —Ñ–∞–π–ª—ã', 'excel_menu').row()
      .text('üåê –í–µ–±-—Ñ–æ—Ä–º–∞', 'open_webapp').row()
      .text('üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', 'open_instructions');
    
    ctx.reply(
      'üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Driver Bot!**\n\n' +
      '–≠—Ç–æ –≤–∞—à –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è–º–∏, –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ —Ä–∞–±–æ—Ç—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–∑–∞—Ö.\n\n' +
      '**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n' +
      '/drivers - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π\n' +
      '/schedule - –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã\n' +
      '/current - –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã\n' +
      '/excel - –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–æ–≤ —Å –≥—Ä—É–∑–∞–º–∏\n' +
      '/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫\n' +
      '/webapp - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-—Ñ–æ—Ä–º—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n' +
      '/driver <ID> - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –≤–æ–¥–∏—Ç–µ–ª—è\n' +
      '/instructions - –û—Ç–∫—Ä—ã—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π\n\n' +
      '**–ù–æ–≤–æ–µ:** –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ Excel —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≥—Ä—É–∑–∞—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏! üìä',
      { parse_mode: 'Markdown', reply_markup: keyboard }
    );
  });

  bot.command('webapp', (ctx) => {
    const keyboard = new InlineKeyboard()
      .url('üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-—Ñ–æ—Ä–º—É', WEBAPP_URL)
      .row()
      .text('üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π', 'drivers_page_1')
      .text('üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', 'open_instructions');
    
    ctx.reply(
      'üåê **–í–µ–±-—Ñ–æ—Ä–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è–º–∏**\n\n' +
      '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —É–¥–æ–±–Ω—É—é –≤–µ–±-—Ñ–æ—Ä–º—É –¥–ª—è:\n' +
      '‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π\n' +
      '‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö\n' +
      '‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π\n' +
      '‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏',
      { parse_mode: 'Markdown', reply_markup: keyboard }
    );
  });

  bot.command('drivers', async (ctx) => {
    try {
      const { text, keyboard } = await createDriversListMessage(1);
      await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π.');
    }
  });

  bot.command('driver', async (ctx) => {
    const driverId = parseInt(ctx.match, 10);
    if (isNaN(driverId)) return ctx.reply('–£–∫–∞–∂–∏—Ç–µ ID. –ü—Ä–∏–º–µ—Ä: `/driver 123`');
    try {
      const driver = await driverService.findDriverById(driverId);
      if (!driver) return ctx.reply(`–í–æ–¥–∏—Ç–µ–ª—å —Å ID ${driverId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      
      const text = formatDriverDetails(driver);
      
      const keyboard = new InlineKeyboard()
        .text('üìÑ –î–æ–≥–æ–≤–æ—Ä', `generate_doc_${driverId}`)
        .text('üìã –ó–∞–¥–∞—á–∏ (—Å–∫–æ—Ä–æ)', `todo_list_${driverId}`).row()
        .text('üí≤ –†–∞—Å—á–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞ (—Å–∫–æ—Ä–æ)', `calculate_route_${driverId}`).row()
        .text('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Å–∫–æ—Ä–æ)', `edit_driver_${driverId}`)
        .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', `delete_driver_${driverId}`);
        
      await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–æ–¥–∏—Ç–µ–ª—è.');
    }
  });

  bot.command('instructions', async (ctx) => {
    const { text, keyboard } = getInstructionsMenu();
    await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
  });

  // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ---
  bot.callbackQuery(/drivers_page_(\d+)/, async (ctx) => {
    const page = parseInt(ctx.match[1]!, 10);
    try {
      const { text, keyboard } = await createDriversListMessage(page);
      await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      await ctx.answerCallbackQuery({ text: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.' });
    }
  });

  bot.callbackQuery(/generate_doc_(\d+)/, async (ctx) => {
    const driverId = parseInt(ctx.match[1]!, 10);
    try {
      await ctx.answerCallbackQuery({ text: 'üìÑ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–æ–≥–æ–≤–æ—Ä–∞...' });
      const docBuffer = await generateLeaseAgreement(driverId, driverService);
      const doc = new InputFile(docBuffer, `lease_agreement_${driverId}.docx`);
      await ctx.replyWithDocument(doc, { caption: `–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è ID ${driverId}` });
    } catch (error: any) {
      console.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è ID ${driverId}:`, error);
      await ctx.answerCallbackQuery({ text: `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, show_alert: true });
    }
  });

  // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π ---
  bot.callbackQuery(/instruction_(\w+)/, async (ctx) => {
    const instructionKey = ctx.match[1] as keyof typeof instructions;
    if (!instructions[instructionKey]) return ctx.answerCallbackQuery({ text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.' });

    try {
      const filePath = path.join(INSTRUCTIONS_DIR, `${instructionKey}.md`);
      const content = await fs.readFile(filePath, 'utf-8');
      const keyboard = new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º', 'back_to_instructions');
      await ctx.editMessageText(content, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      await ctx.answerCallbackQuery({ text: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.', show_alert: true });
    }
  });

  bot.callbackQuery('back_to_instructions', async (ctx) => {
    const { text, keyboard } = getInstructionsMenu();
    await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: keyboard });
  });

  bot.callbackQuery('open_webapp', (ctx) => {
    const keyboard = new InlineKeyboard()
      .url('üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-—Ñ–æ—Ä–º—É', WEBAPP_URL)
      .row()
      .text('üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π', 'drivers_page_1')
      .text('üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', 'open_instructions');
    
    ctx.editMessageText(
      'üåê **–í–µ–±-—Ñ–æ—Ä–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è–º–∏**\n\n' +
      '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —É–¥–æ–±–Ω—É—é –≤–µ–±-—Ñ–æ—Ä–º—É –¥–ª—è:\n' +
      '‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π\n' +
      '‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö\n' +
      '‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π\n' +
      '‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏',
      { parse_mode: 'Markdown', reply_markup: keyboard }
    );
  });

  bot.callbackQuery('open_instructions', (ctx) => {
    const { text, keyboard } = getInstructionsMenu();
    ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: keyboard });
  });

  bot.callbackQuery('excel_menu', async (ctx) => {
    await ctx.answerCallbackQuery();
    
    const keyboard = new InlineKeyboard()
      .text('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª', 'upload_excel_instructions')
      .text('üìä –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞', 'test_excel_parser')
      .row()
      .text('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏', 'excel_processing_stats')
      .text('üìã –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞', 'excel_format_info')
      .row()
      .text('üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏', 'deliveries_page_1')
      .text('üåê –í–µ–±-—Ñ–æ—Ä–º–∞', 'open_webapp');
    
    await ctx.editMessageText(
      'üìä **–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–æ–≤**\n\n' +
      '–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ Excel —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≥—Ä—É–∑–∞—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n' +
      '**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n' +
      '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–∑–∞—Ö\n' +
      '‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏\n' +
      '‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n' +
      '‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n' +
      '**–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª** –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.',
      { parse_mode: 'Markdown', reply_markup: keyboard }
    );
  });

  // --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---
  bot.command('schedule', async (ctx) => {
    try {
      const today = new Date();
      const currentMonth = await scheduleService.getCalendarMonth(today.getFullYear(), today.getMonth() + 1);
      
      let text = `üìÖ **–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –Ω–∞ ${today.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })}**\n\n`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      const todayStr = today.toISOString().split('T')[0];
      const todaySchedules = currentMonth.weeks
        .flatMap(week => week.days)
        .find(day => day.date === todayStr)?.schedules || [];
      
      if (todaySchedules.length > 0) {
        text += `**–°–µ–≥–æ–¥–Ω—è (${today.toLocaleDateString('ru-RU')}):**\n`;
        todaySchedules.forEach(schedule => {
          const statusIcon = {
            working: 'üü¢',
            off: 'üî¥',
            repair: 'üîß',
            reserve: 'üü°',
            vacation: 'üèñÔ∏è',
            loading: '‚è∞'
          }[schedule.status];
          
          text += `${statusIcon} ${schedule.driver.personalData.lastName} ${schedule.driver.personalData.firstName}\n`;
          text += `   ${schedule.start_time} - ${schedule.end_time}\n`;
          if (schedule.route_info) text += `   –ú–∞—Ä—à—Ä—É—Ç: ${schedule.route_info}\n`;
          text += '\n';
        });
      } else {
        text += `–°–µ–≥–æ–¥–Ω—è (${today.toLocaleDateString('ru-RU')}) –≥—Ä–∞—Ñ–∏–∫–æ–≤ –Ω–µ—Ç.\n\n`;
      }
      
      const keyboard = new InlineKeyboard()
        .text('üåê –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å', 'open_schedule_webapp')
        .row()
        .text('üöó –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã', 'current_trips')
        .text('üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π', 'drivers_page_1');
      
      await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã.');
    }
  });

  bot.command('current', async (ctx) => {
    try {
      const currentSchedules = await scheduleService.getCurrentSchedules();
      
      if (currentSchedules.length === 0) {
        await ctx.reply('üöó **–¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã**\n\n–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π—Å–æ–≤.');
        return;
      }
      
      let text = `üöó **–¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã**\n\n`;
      text += `–í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU')}\n\n`;
      
      currentSchedules.forEach(schedule => {
        text += `üü¢ **${schedule.driver.personalData.lastName} ${schedule.driver.personalData.firstName}**\n`;
        text += `–ê–≤—Ç–æ: ${schedule.driver.vehicle.make} ${schedule.driver.vehicle.model} (${schedule.driver.vehicle.licensePlate})\n`;
        text += `–í—Ä–µ–º—è: ${schedule.start_time} - ${schedule.end_time}\n`;
        if (schedule.route_info) text += `–ú–∞—Ä—à—Ä—É—Ç: ${schedule.route_info}\n`;
        text += '\n';
      });
      
      const keyboard = new InlineKeyboard()
        .text('üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã', 'schedule_current')
        .row()
        .text('üåê –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å', 'open_schedule_webapp');
      
      await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ä–µ–π—Å–æ–≤:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–π—Å–æ–≤.');
    }
  });

  bot.command('deliveries', async (ctx) => {
    try {
      const deliveries = await deliveryService.getAllDeliveries();
      
      if (deliveries.length === 0) {
        const keyboard = new InlineKeyboard()
          .text('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª', 'upload_excel_instructions')
          .row()
          .text('üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-—Ñ–æ—Ä–º—É', 'open_webapp');
        
        await ctx.reply(
          'üì¶ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏**\n\n' +
          '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫ –ø—É—Å—Ç–∞.\n\n' +
          '**–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:**\n' +
          '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –¥–æ—Å—Ç–∞–≤–∫–∞—Ö\n' +
          '2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-—Ñ–æ—Ä–º—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞\n\n' +
          '**–§–æ—Ä–º–∞—Ç Excel —Ñ–∞–π–ª–∞:**\n' +
          '‚Ä¢ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: DD.MM.YY_NN_XXX_YYY_ZZ\n' +
          '‚Ä¢ –î–µ—Ç–∞–ª–∏ –≥—Ä—É–∑–∞: –æ–±—ä–µ–º/–≤–µ—Å/–¥–ª–∏–Ω–∞/–¥–æ–ø.–∏–Ω—Ñ–æ\n' +
          '‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ: –Ω–æ–º–µ—Ä.–ó–∞–∫–∞–∑–∞–Ω–æ.–¥–∞—Ç–∞ –≤—Ä–µ–º—è\n' +
          '‚Ä¢ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞\n' +
          '‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ: –¥–∞—Ç–∞ –≤—Ä–µ–º—è ID –∫–æ–º–ø–∞–Ω–∏—è',
          { parse_mode: 'Markdown', reply_markup: keyboard }
        );
        return;
      }
      
      const currentDeliveries = await deliveryService.getCurrentDeliveries();
      const statistics = await deliveryService.getCargoStatistics();
      
      let text = `üì¶ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏**\n\n`;
      text += `**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
      text += `‚Ä¢ –í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: ${statistics.totalDeliveries}\n`;
      text += `‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: ${statistics.totalVolume} –∫—É–±.–º\n`;
      text += `‚Ä¢ –û–±—â–∏–π –≤–µ—Å: ${statistics.totalWeight} –∫–≥\n`;
      text += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: ${statistics.averageVolume} –∫—É–±.–º\n\n`;
      
      if (currentDeliveries.length > 0) {
        text += `**–¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã (—Å–µ–≥–æ–¥–Ω—è):**\n`;
        currentDeliveries.slice(0, 3).forEach(delivery => {
          text += `üöö **${delivery.customerName}**\n`;
          text += `   –ì—Ä—É–∑: ${delivery.cargoVolume} –∫—É–±.–º / ${delivery.cargoWeight} –∫–≥\n`;
          text += `   –í—Ä–µ–º—è –ø–æ–≥—Ä—É–∑–∫–∏: ${delivery.orderTime}\n`;
          text += `   –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${delivery.deliveryTime}\n\n`;
        });
        if (currentDeliveries.length > 3) {
          text += `... –∏ –µ—â–µ ${currentDeliveries.length - 3} –¥–æ—Å—Ç–∞–≤–æ–∫\n\n`;
        }
      }
      
      const keyboard = new InlineKeyboard()
        .text('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel', 'upload_excel_instructions')
        .text('üöö –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã', 'current_deliveries')
        .row()
        .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'delivery_statistics')
        .text('üîç –ü–æ–∏—Å–∫', 'search_deliveries')
        .row()
        .text('üåê –í–µ–±-—Ñ–æ—Ä–º–∞', 'open_webapp');
      
      await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç–∞–≤–∫–∞—Ö.');
    }
  });

  // --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel —Ñ–∞–π–ª–∞–º–∏ ---
  bot.command('excel', async (ctx) => {
    const keyboard = new InlineKeyboard()
      .text('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª', 'upload_excel_instructions')
      .text('üìä –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞', 'test_excel_parser')
      .row()
      .text('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏', 'excel_processing_stats')
      .text('üìã –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞', 'excel_format_info')
      .row()
      .text('üåê –í–µ–±-—Ñ–æ—Ä–º–∞', 'open_webapp');
    
    await ctx.reply(
      'üìä **–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–æ–≤**\n\n' +
      '–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ Excel —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≥—Ä—É–∑–∞—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n' +
      '**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n' +
      '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–∑–∞—Ö\n' +
      '‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏\n' +
      '‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n' +
      '‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n' +
      '**–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª** –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.',
      { parse_mode: 'Markdown', reply_markup: keyboard }
    );
  });

  bot.command('stats', async (ctx) => {
    try {
      const stats = await excelProcessingService.getProcessingStats();
      
      const text = `üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫**\n\n` +
        `üì¶ **–í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫**: ${stats.total}\n` +
        `‚è≥ **–í –æ–∂–∏–¥–∞–Ω–∏–∏**: ${stats.pending}\n` +
        `‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–æ**: ${stats.completed}\n` +
        `üïê **–û–±–Ω–æ–≤–ª–µ–Ω–æ**: ${stats.lastUpdated.toLocaleString('ru-RU')}\n\n` +
        `üìä **–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–æ–≤**\n` +
        `‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–∑–∞—Ö\n` +
        `‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è\n` +
        `‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n` +
        `‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤`;
      
      const keyboard = new InlineKeyboard()
        .text('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel', 'upload_excel_instructions')
        .text('üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏', 'deliveries_page_1')
        .row()
        .text('üåê –í–µ–±-—Ñ–æ—Ä–º–∞', 'open_webapp');
      
      await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  });

  // Callback –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  bot.callbackQuery('open_schedule_webapp', (ctx) => {
    const keyboard = new InlineKeyboard()
      .url('üìÖ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å', `${WEBAPP_URL}/schedule`)
      .row()
      .text('üöó –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã', 'current_trips')
      .text('üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π', 'drivers_page_1');
    
    ctx.editMessageText(
      'üìÖ **–ö–∞–ª–µ–Ω–¥–∞—Ä—å –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã**\n\n' +
      '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è:\n' +
      '‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –¥–Ω—è–º\n' +
      '‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤\n' +
      '‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö\n' +
      '‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π',
      { parse_mode: 'Markdown', reply_markup: keyboard }
    );
  });

  bot.callbackQuery('schedule_current', async (ctx) => {
    await ctx.answerCallbackQuery();
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã
    try {
      const today = new Date();
      const currentMonth = await scheduleService.getCalendarMonth(today.getFullYear(), today.getMonth() + 1);
      
      let text = `üìÖ **–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –Ω–∞ ${today.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })}**\n\n`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      const todayStr = today.toISOString().split('T')[0];
      const todaySchedules = currentMonth.weeks
        .flatMap(week => week.days)
        .find(day => day.date === todayStr)?.schedules || [];
      
      if (todaySchedules.length > 0) {
        text += `**–°–µ–≥–æ–¥–Ω—è (${today.toLocaleDateString('ru-RU')}):**\n`;
        todaySchedules.forEach(schedule => {
          const statusIcon = {
            working: 'üü¢',
            off: 'üî¥',
            repair: 'üîß',
            reserve: 'üü°',
            vacation: 'üèñÔ∏è',
            loading: '‚è∞'
          }[schedule.status];
          
          text += `${statusIcon} ${schedule.driver.personalData.lastName} ${schedule.driver.personalData.firstName}\n`;
          text += `   ${schedule.start_time} - ${schedule.end_time}\n`;
          if (schedule.route_info) text += `   –ú–∞—Ä—à—Ä—É—Ç: ${schedule.route_info}\n`;
          text += '\n';
        });
      } else {
        text += `–°–µ–≥–æ–¥–Ω—è (${today.toLocaleDateString('ru-RU')}) –≥—Ä–∞—Ñ–∏–∫–æ–≤ –Ω–µ—Ç.\n\n`;
      }
      
      const keyboard = new InlineKeyboard()
        .text('üåê –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å', 'open_schedule_webapp')
        .row()
        .text('üöó –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã', 'current_trips')
        .text('üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π', 'drivers_page_1');
      
      await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:', error);
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã.');
    }
  });

  bot.callbackQuery('current_trips', async (ctx) => {
    await ctx.answerCallbackQuery();
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã
    try {
      const currentSchedules = await scheduleService.getCurrentSchedules();
      
      if (currentSchedules.length === 0) {
        await ctx.editMessageText('üöó **–¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã**\n\n–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π—Å–æ–≤.');
        return;
      }
      
      let text = `üöó **–¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã**\n\n`;
      text += `–í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU')}\n\n`;
      
      currentSchedules.forEach(schedule => {
        text += `üü¢ **${schedule.driver.personalData.lastName} ${schedule.driver.personalData.firstName}**\n`;
        text += `–ê–≤—Ç–æ: ${schedule.driver.vehicle.make} ${schedule.driver.vehicle.model} (${schedule.driver.vehicle.licensePlate})\n`;
        text += `–í—Ä–µ–º—è: ${schedule.start_time} - ${schedule.end_time}\n`;
        if (schedule.route_info) text += `–ú–∞—Ä—à—Ä—É—Ç: ${schedule.route_info}\n`;
        text += '\n';
      });
      
      const keyboard = new InlineKeyboard()
        .text('üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã', 'schedule_current')
        .row()
        .text('üåê –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å', 'open_schedule_webapp');
      
      await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ä–µ–π—Å–æ–≤:', error);
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–π—Å–æ–≤.');
    }
  });

  // --- –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ---
  bot.callbackQuery(/(todo_list|calculate_route|edit_driver)_(\d+)/, async (ctx) => {
    await ctx.answerCallbackQuery({
      text: '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üë®‚Äçüíª',
      show_alert: true,
    });
  });

  bot.callbackQuery(/delete_driver_(\d+)/, async (ctx) => {
    const driverId = parseInt((ctx.match as RegExpMatchArray)[1]!, 10);
    const driver = await driverService.findDriverById(driverId);
    if (!driver) return ctx.answerCallbackQuery({ text: '–≠—Ç–æ—Ç –≤–æ–¥–∏—Ç–µ–ª—å —É–∂–µ —É–¥–∞–ª–µ–Ω.', show_alert: true });
    const text = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è *${driver.personalData.lastName}*?`;
    const keyboard = new InlineKeyboard()
      .text('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', `confirm_delete_${driverId}`)
      .text('‚ùå –û—Ç–º–µ–Ω–∞', `cancel_delete`);
    await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    await ctx.answerCallbackQuery();
  });

  bot.callbackQuery(/confirm_delete_(\d+)/, async (ctx) => {
    const driverId = parseInt((ctx.match as RegExpMatchArray)[1]!, 10);
    try {
      await driverService.deleteDriver(driverId);
      await ctx.editMessageText(`‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —Å ID ${driverId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
    } catch (error) {
      await ctx.editMessageText(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è —Å ID ${driverId}.`);
    }
  });

  bot.callbackQuery('cancel_delete', async (ctx) => {
    await ctx.deleteMessage();
  });

  // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∞–≤–æ–∫ ---
  bot.callbackQuery('upload_excel_instructions', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.editMessageText(
      'üì§ **–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞**\n\n' +
      '**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ:**\n\n' +
      '1Ô∏è‚É£ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª** (.xlsx –∏–ª–∏ .xls)\n' +
      '2Ô∏è‚É£ **–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:**\n' +
      '   ‚Ä¢ –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ = –æ–¥–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞\n' +
      '   ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: ID | –ì—Ä—É–∑ | –ó–∞–∫–∞–∑ | –ö–ª–∏–µ–Ω—Ç | –î–æ—Å—Ç–∞–≤–∫–∞\n\n' +
      '**–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏:**\n' +
      '`01.09.25_77_004_–í–ò–ü_19 3.32 –∫—É–±.–º/871 –∫–≥/1.010 –º/–ù–µ—Ç 13908.–ó–∞–∫–∞–∑–∞–Ω–æ.01.09.2025 00:00:00. –ö—É–ª—É—à–æ–≤ –ú–∞—Ä–∞—Ç –®–∞–π–ª–æ–æ–±–∞–µ–≤–∏—á ........01.09.2025 01:30:00..202 –û–û–û "–ì–†–£–ó –°–ï–†–í–ò–°"`\n\n' +
      '**–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:**\n' +
      '‚Ä¢ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–∞—Ä—Å—è—Ç—Å—è\n' +
      '‚Ä¢ –ü–æ—è–≤–∏—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã\n' +
      '‚Ä¢ –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å\n\n' +
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üìé',
      { parse_mode: 'Markdown' }
    );
  });

  bot.callbackQuery('current_deliveries', async (ctx) => {
    await ctx.answerCallbackQuery();
    try {
      const currentDeliveries = await deliveryService.getCurrentDeliveries();
      
      if (currentDeliveries.length === 0) {
        await ctx.editMessageText(
          'üöö **–¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã**\n\n' +
          '–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫.\n\n' +
          '–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞.',
          { parse_mode: 'Markdown' }
        );
        return;
      }
      
      let text = `üöö **–¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã (—Å–µ–≥–æ–¥–Ω—è)**\n\n`;
      text += `–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}\n`;
      text += `–í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: ${currentDeliveries.length}\n\n`;
      
      currentDeliveries.forEach((delivery, index) => {
        text += `${index + 1}. **${delivery.customerName}**\n`;
        text += `   üì¶ –ì—Ä—É–∑: ${delivery.cargoVolume} –∫—É–±.–º / ${delivery.cargoWeight} –∫–≥\n`;
        text += `   ‚è∞ –ü–æ–≥—Ä—É–∑–∫–∞: ${delivery.orderTime}\n`;
        text += `   üöö –î–æ—Å—Ç–∞–≤–∫–∞: ${delivery.deliveryTime}\n`;
        text += `   üÜî ID: ${delivery.deliveryId}\n\n`;
      });
      
      const keyboard = new InlineKeyboard()
        .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'delivery_statistics')
        .text('üîç –ü–æ–∏—Å–∫', 'search_deliveries')
        .row()
        .text('üì¶ –í—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏', 'all_deliveries')
        .text('üåê –í–µ–±-—Ñ–æ—Ä–º–∞', 'open_webapp');
      
      await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ä–µ–π—Å–æ–≤:', error);
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–π—Å–æ–≤.');
    }
  });

  bot.callbackQuery('delivery_statistics', async (ctx) => {
    await ctx.answerCallbackQuery();
    try {
      const statistics = await deliveryService.getCargoStatistics();
      
      let text = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–∑–æ–≤**\n\n`;
      text += `**–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n`;
      text += `‚Ä¢ –í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: ${statistics.totalDeliveries}\n`;
      text += `‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: ${statistics.totalVolume} –∫—É–±.–º\n`;
      text += `‚Ä¢ –û–±—â–∏–π –≤–µ—Å: ${statistics.totalWeight} –∫–≥\n\n`;
      
      text += `**–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n`;
      text += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: ${statistics.averageVolume} –∫—É–±.–º\n`;
      text += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: ${statistics.averageWeight} –∫–≥\n\n`;
      
      if (statistics.totalDeliveries > 0) {
        text += `**–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n`;
        text += `‚Ä¢ –û–±—ä–µ–º –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É: ${(statistics.totalVolume / statistics.totalDeliveries).toFixed(2)} –∫—É–±.–º\n`;
        text += `‚Ä¢ –í–µ—Å –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É: ${(statistics.totalWeight / statistics.totalDeliveries).toFixed(0)} –∫–≥\n`;
      }
      
      const keyboard = new InlineKeyboard()
        .text('üöö –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã', 'current_deliveries')
        .text('üì¶ –í—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏', 'all_deliveries')
        .row()
        .text('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel', 'upload_excel_instructions')
        .text('üåê –í–µ–±-—Ñ–æ—Ä–º–∞', 'open_webapp');
      
      await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  });

  bot.callbackQuery('search_deliveries', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.editMessageText(
      'üîç **–ü–æ–∏—Å–∫ –¥–æ—Å—Ç–∞–≤–æ–∫**\n\n' +
      '**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞:**\n\n' +
      '1Ô∏è‚É£ **–ü–æ –¥–∞—Ç–µ:** /deliveries_date DD.MM.YYYY\n' +
      '2Ô∏è‚É£ **–ü–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–≥—Ä—É–∑–∫–∏:** /deliveries_time HH:MM\n' +
      '3Ô∏è‚É£ **–ü–æ –∫–ª–∏–µ–Ω—Ç—É:** /deliveries_search –§–ò–û\n\n' +
      '**–ü—Ä–∏–º–µ—Ä—ã:**\n' +
      '‚Ä¢ `/deliveries_date 01.09.2025`\n' +
      '‚Ä¢ `/deliveries_time 08:00`\n' +
      '‚Ä¢ `/deliveries_search –ò–≤–∞–Ω–æ–≤`\n\n' +
      '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-—Ñ–æ—Ä–º—É –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞!',
      { parse_mode: 'Markdown' }
    );
  });

  bot.callbackQuery('all_deliveries', async (ctx) => {
    await ctx.answerCallbackQuery();
    try {
      const allDeliveries = await deliveryService.getAllDeliveries();
      
      if (allDeliveries.length === 0) {
        await ctx.editMessageText(
          'üì¶ **–í—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏**\n\n' +
          '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫ –ø—É—Å—Ç–∞.\n\n' +
          '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –≤–µ–±-—Ñ–æ—Ä–º—É.',
          { parse_mode: 'Markdown' }
        );
        return;
      }
      
      let text = `üì¶ **–í—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏**\n\n`;
      text += `–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${allDeliveries.length}\n\n`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–æ—Å—Ç–∞–≤–æ–∫
      allDeliveries.slice(0, 5).forEach((delivery, index) => {
        text += `${index + 1}. **${delivery.customerName}**\n`;
        text += `   üìÖ ${delivery.deliveryDate} ${delivery.deliveryTime}\n`;
        text += `   üì¶ ${delivery.cargoVolume} –∫—É–±.–º / ${delivery.cargoWeight} –∫–≥\n`;
        text += `   üÜî ID: ${delivery.deliveryId}\n\n`;
      });
      
      if (allDeliveries.length > 5) {
        text += `... –∏ –µ—â–µ ${allDeliveries.length - 5} –¥–æ—Å—Ç–∞–≤–æ–∫\n\n`;
      }
      
      const keyboard = new InlineKeyboard()
        .text('üöö –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã', 'current_deliveries')
        .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'delivery_statistics')
        .row()
        .text('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel', 'upload_excel_instructions')
        .text('üåê –í–µ–±-—Ñ–æ—Ä–º–∞', 'open_webapp');
      
      await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç–∞–≤–æ–∫:', error);
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –¥–æ—Å—Ç–∞–≤–æ–∫.');
    }
  });

  // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Excel —Ñ–∞–π–ª–æ–≤ ---
  bot.callbackQuery('test_excel_parser', async (ctx) => {
    await ctx.answerCallbackQuery();
    
    try {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏
      const mockBuffer = Buffer.from('test data');
      const results = await excelProcessingService.processExcelFile(mockBuffer);
      const formattedResults = excelProcessingService.formatProcessingResults(results);
      
      await ctx.editMessageText(
        `üß™ **–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ Excel**\n\n` +
        `–ü–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏!\n\n` +
        formattedResults,
        { parse_mode: 'Markdown' }
      );
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞:', error);
      await ctx.editMessageText(
        '‚ùå **–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞**\n\n' +
        `–î–µ—Ç–∞–ª–∏: ${(error as any)?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        { parse_mode: 'Markdown' }
      );
    }
  });

  bot.callbackQuery('excel_processing_stats', async (ctx) => {
    await ctx.answerCallbackQuery();
    
    try {
      const stats = await excelProcessingService.getProcessingStats();
      
      const text = `üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel**\n\n` +
        `üì¶ **–í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫ –≤ –±–∞–∑–µ**: ${stats.total}\n` +
        `‚è≥ **–í –æ–∂–∏–¥–∞–Ω–∏–∏**: ${stats.pending}\n` +
        `‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–æ**: ${stats.completed}\n` +
        `üïê **–û–±–Ω–æ–≤–ª–µ–Ω–æ**: ${stats.lastUpdated.toLocaleString('ru-RU')}\n\n` +
        `üìä **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–µ—Ä–∞**\n` +
        `‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n` +
        `‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏\n` +
        `‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n` +
        `‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–æ–∫`;
      
      const keyboard = new InlineKeyboard()
        .text('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel', 'upload_excel_instructions')
        .text('üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏', 'deliveries_page_1')
        .row()
        .text('üåê –í–µ–±-—Ñ–æ—Ä–º–∞', 'open_webapp');
      
      await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: keyboard });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Excel:', error);
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
    }
  });

  bot.callbackQuery('excel_format_info', async (ctx) => {
    await ctx.answerCallbackQuery();
    
    await ctx.editMessageText(
      'üìã **–§–æ—Ä–º–∞—Ç Excel —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏**\n\n' +
      '**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ (4 –∫–æ–ª–æ–Ω–∫–∏):**\n\n' +
      '**1Ô∏è‚É£ –ú–∞—Ä—à—Ä—É—Ç**\n' +
      '–§–æ—Ä–º–∞—Ç: `DD.MM.YY_NN_XXX_YYY_ZZ`\n' +
      '–ü—Ä–∏–º–µ—Ä: `01.09.25_77_00—á_–í–ò–ü_19`\n\n' +
      '**2Ô∏è‚É£ –ì—Ä—É–∑**\n' +
      '–§–æ—Ä–º–∞—Ç: `–æ–±—ä–µ–º –∫—É–±.–º/–≤–µ—Å –∫–≥/–¥–ª–∏–Ω–∞ –º/–¥–æ–ø.–∏–Ω—Ñ–æ`\n' +
      '–ü—Ä–∏–º–µ—Ä: `3.32 –∫—É–±.–º/871 –∫–≥/1.010 –º/–ù–µ—Ç`\n\n' +
      '**3Ô∏è‚É£ –ó–∞–∫–∞–∑**\n' +
      '–§–æ—Ä–º–∞—Ç: `–Ω–æ–º–µ—Ä.–ó–∞–∫–∞–∑–∞–Ω–æ.–¥–∞—Ç–∞ –≤—Ä–µ–º—è.–∫–ª–∏–µ–Ω—Ç........–¥–∞—Ç–∞_–¥–æ—Å—Ç–∞–≤–∫–∏ –≤—Ä–µ–º—è_–¥–æ—Å—Ç–∞–≤–∫–∏..ID`\n' +
      '–ü—Ä–∏–º–µ—Ä: `13908.–ó–∞–∫–∞–∑–∞–Ω–æ.01\\.09\\.2025 00:00:00.–ö—É–ª—É—à–æ–≤ –ú–∞—Ä–∞—Ç –®–∞–π–ª–æ–æ–±–∞–µ–≤–∏—á........01\\.09\\.2025 01:30:00..202`\n\n' +
      '**4Ô∏è‚É£ –ö–æ–º–ø–∞–Ω–∏—è**\n' +
      '–ü—Ä–∏–º–µ—Ä: `–û–û–û "–ì–†–£–ó –°–ï–†–í–ò–°"`\n\n' +
      '**–í–∞–∂–Ω–æ:**\n' +
      '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (;) –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å\n' +
      '‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx\n' +
      '‚Ä¢ –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ = –æ–¥–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞\n\n' +
      '**–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª** –∏ –æ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! üìé',
      { parse_mode: 'Markdown' }
    );
  });

  // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–æ–≤ ---
  bot.on('message:document', async (ctx) => {
    try {
      const document = ctx.message.document;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Excel —Ñ–∞–π–ª
      if (!document.file_name?.endsWith('.xlsx') && !document.file_name?.endsWith('.xls')) {
        await ctx.reply(
          '‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞**\n\n' +
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls).\n\n' +
          '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n' +
          '‚Ä¢ .xlsx (Excel 2007+)\n' +
          '‚Ä¢ .xls (Excel 97-2003)',
          { parse_mode: 'Markdown' }
        );
        return;
      }
      
      await ctx.reply('üì§ **–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —Ñ–∞–π–ª –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
      
      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const file = await ctx.api.getFile(document.file_id);
      const filePath = file.file_path;
      
      if (!filePath) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
        return;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Excel —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
      try {
        // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞)
        const mockBuffer = Buffer.from('mock excel data');
        
        const results = await excelProcessingService.processExcelFile(mockBuffer);
        const formattedResults = excelProcessingService.formatProcessingResults(results);
        
        await ctx.reply(
          `‚úÖ **Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**\n\n` +
          `**–§–∞–π–ª:** ${document.file_name}\n` +
          `**–†–∞–∑–º–µ—Ä:** ${document.file_size ? (document.file_size / 1024).toFixed(1) : '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'} KB\n\n` +
          formattedResults,
          { parse_mode: 'Markdown' }
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É –∑–∞–∫–∞–∑—É
        const successfulResults = (results as any).results.filter((r: any) => r.success);
        if (successfulResults.length > 0) {
          await ctx.reply('üìã **–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑–∞–º:**');
          
          for (const result of successfulResults.slice(0, 3)) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            await ctx.reply(result.formatted, { parse_mode: 'Markdown' });
            await new Promise(resolve => setTimeout(resolve, 1000)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
          }
          
          if (successfulResults.length > 3) {
            await ctx.reply(`... –∏ –µ—â–µ ${successfulResults.length - 3} –∑–∞–∫–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!`);
          }
        }
        
      } catch (processingError) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞:', processingError);
        await ctx.reply(
          '‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞**\n\n' +
          `–î–µ—Ç–∞–ª–∏: ${(processingError as any)?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n\n` +
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
          { parse_mode: 'Markdown' }
        );
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞.');
    }
  });

  // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---
  bot.catch((err) => console.error(`–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:`, err));

  return bot;
}

// --- –ó–∞–ø—É—Å–∫ ---
export async function startBot(driverService: DriverService, scheduleService: ScheduleService) {
  const BOT_TOKEN = process.env.BOT_TOKEN;
  if (!BOT_TOKEN) {
    console.error('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞.');
    process.exit(1);
  }
  const bot = createBot(BOT_TOKEN, driverService, scheduleService);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –±–æ—Ç–æ–º
  notificationService.setBot(bot);
  
  console.log('–ó–∞–ø—É—Å–∫–∞—é Telegram-–±–æ—Ç–∞...');
  await bot.start();
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url.startsWith('file://') && process.argv[1] === new URL(import.meta.url).pathname) {
  const driverService = new DriverService();
  const scheduleService = new ScheduleService();
  startBot(driverService, scheduleService);
}
