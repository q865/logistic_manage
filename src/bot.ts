
// src/bot.ts
import 'dotenv/config';
import fs from 'fs/promises';
import path from 'path';
import { Bot, InlineKeyboard, InputFile } from 'grammy';
import { DriverService } from './services/driverService.js';
import { ScheduleService } from './services/scheduleService.js';
import { generateLeaseAgreement } from './services/documentService.js';
import { notificationService } from './services/notificationService.js';
import type { Driver } from './models/Driver.js';

const PAGE_LIMIT = 5;
const INSTRUCTIONS_DIR = path.resolve(process.cwd(), 'instructions');
const WEBAPP_URL = process.env.WEBAPP_URL || 'http://localhost:5173';

// --- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π ---
const instructions = {
  'company_rules': 'üìú –ü—Ä–∞–≤–∏–ª–∞ –∫–æ–º–ø–∞–Ω–∏–∏',
  'document_handling': 'üìë –†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏',
  'route_difficulties': 'üöß –°–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ',
  'general_info': '‚ÑπÔ∏è –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
};

// –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
export function createBot(token: string, driverService: DriverService, scheduleService: ScheduleService) {
  const bot = new Bot(token);

  // --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é ---
  bot.api.setMyCommands([
    { command: 'start', description: 'üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–ø—Ä–∞–≤–∫–∞' },
    { command: 'drivers', description: 'üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π' },
    { command: 'schedule', description: 'üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã' },
    { command: 'current', description: 'üöó –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã' },
    { command: 'webapp', description: 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-—Ñ–æ—Ä–º—É' },
    { command: 'instructions', description: 'üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π' },
  ]);

  // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
  const formatDriverDetails = (driver: Driver): string => {
    return `**üë§ –í–æ–¥–∏—Ç–µ–ª—å ID: ${driver.id}**\n` +
           `*–§–ò–û:* ${driver.personalData.lastName} ${driver.personalData.firstName} ${driver.personalData.patronymic || ''}\n` +
           `*–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${new Date(driver.personalData.birthDate).toLocaleDateString('ru-RU')}\n\n` +
           `**üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å**\n` +
           `*–ú–∞—Ä–∫–∞/–ú–æ–¥–µ–ª—å:* ${driver.vehicle.make} ${driver.vehicle.model}\n` +
           `*–ì–æ—Å. –Ω–æ–º–µ—Ä:* ${driver.vehicle.licensePlate}`;
  };

  const createDriversListMessage = async (page = 1) => {
    const { drivers, total } = await driverService.getAllDrivers({ page, limit: PAGE_LIMIT });
    const totalPages = Math.ceil(total / PAGE_LIMIT) || 1;
    let text = `**–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages})**\n\n`;
    if (total === 0) {
      text = '–í–æ–¥–∏—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.';
    } else {
      text += drivers.map(d => 
        `*ID:* ${d.id} | *–§–ò–û:* ${d.personalData.lastName} ${d.personalData.firstName}\n` +
        `*–ê–≤—Ç–æ:* ${d.vehicle.make} ${d.vehicle.model} (${d.vehicle.licensePlate})`
      ).join('\n--------------------\n');
    }
    const keyboard = new InlineKeyboard();
    if (page > 1) keyboard.text('‚óÄÔ∏è –ù–∞–∑–∞–¥', `drivers_page_${page - 1}`);
    if (page < totalPages) keyboard.text('–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', `drivers_page_${page + 1}`);
    return { text, keyboard };
  };

  const getInstructionsMenu = () => {
    const keyboard = new InlineKeyboard();
    for (const key in instructions) {
      keyboard.text(instructions[key as keyof typeof instructions], `instruction_${key}`).row();
    }
    return {
      text: 'üìö **–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:',
      keyboard,
    };
  };

  // --- –ö–æ–º–∞–Ω–¥—ã ---
  bot.command(['start', 'help'], (ctx) => {
    const keyboard = new InlineKeyboard()
      .text('üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π', 'drivers_page_1').row()
      .text('üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã', 'schedule_current').row()
      .text('üöó –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã', 'current_trips').row()
      .text('üåê –í–µ–±-—Ñ–æ—Ä–º–∞', 'open_webapp').row()
      .text('üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', 'open_instructions');
    
    ctx.reply(
      'üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Driver Bot!**\n\n' +
      '–≠—Ç–æ –≤–∞—à –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è–º–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ —Ä–∞–±–æ—Ç—ã.\n\n' +
      '**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n' +
      '/drivers - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π\n' +
      '/schedule - –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã\n' +
      '/current - –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã\n' +
      '/webapp - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-—Ñ–æ—Ä–º—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n' +
      '/driver <ID> - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –≤–æ–¥–∏—Ç–µ–ª—è\n' +
      '/instructions - –û—Ç–∫—Ä—ã—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π',
      { parse_mode: 'Markdown', reply_markup: keyboard }
    );
  });

  bot.command('webapp', (ctx) => {
    const keyboard = new InlineKeyboard()
      .url('üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-—Ñ–æ—Ä–º—É', WEBAPP_URL)
      .row()
      .text('üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π', 'drivers_page_1')
      .text('üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', 'open_instructions');
    
    ctx.reply(
      'üåê **–í–µ–±-—Ñ–æ—Ä–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è–º–∏**\n\n' +
      '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —É–¥–æ–±–Ω—É—é –≤–µ–±-—Ñ–æ—Ä–º—É –¥–ª—è:\n' +
      '‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π\n' +
      '‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö\n' +
      '‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π\n' +
      '‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏',
      { parse_mode: 'Markdown', reply_markup: keyboard }
    );
  });

  bot.command('drivers', async (ctx) => {
    try {
      const { text, keyboard } = await createDriversListMessage(1);
      await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π.');
    }
  });

  bot.command('driver', async (ctx) => {
    const driverId = parseInt(ctx.match, 10);
    if (isNaN(driverId)) return ctx.reply('–£–∫–∞–∂–∏—Ç–µ ID. –ü—Ä–∏–º–µ—Ä: `/driver 123`');
    try {
      const driver = await driverService.findDriverById(driverId);
      if (!driver) return ctx.reply(`–í–æ–¥–∏—Ç–µ–ª—å —Å ID ${driverId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      
      const text = formatDriverDetails(driver);
      
      const keyboard = new InlineKeyboard()
        .text('üìÑ –î–æ–≥–æ–≤–æ—Ä', `generate_doc_${driverId}`)
        .text('üìã –ó–∞–¥–∞—á–∏ (—Å–∫–æ—Ä–æ)', `todo_list_${driverId}`).row()
        .text('üí≤ –†–∞—Å—á–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞ (—Å–∫–æ—Ä–æ)', `calculate_route_${driverId}`).row()
        .text('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Å–∫–æ—Ä–æ)', `edit_driver_${driverId}`)
        .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', `delete_driver_${driverId}`);
        
      await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–æ–¥–∏—Ç–µ–ª—è.');
    }
  });

  bot.command('instructions', async (ctx) => {
    const { text, keyboard } = getInstructionsMenu();
    await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
  });

  // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ---
  bot.callbackQuery(/drivers_page_(\d+)/, async (ctx) => {
    const page = parseInt(ctx.match[1]!, 10);
    try {
      const { text, keyboard } = await createDriversListMessage(page);
      await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      await ctx.answerCallbackQuery({ text: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.' });
    }
  });

  bot.callbackQuery(/generate_doc_(\d+)/, async (ctx) => {
    const driverId = parseInt(ctx.match[1]!, 10);
    try {
      await ctx.answerCallbackQuery({ text: 'üìÑ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–æ–≥–æ–≤–æ—Ä–∞...' });
      const docBuffer = await generateLeaseAgreement(driverId, driverService);
      const doc = new InputFile(docBuffer, `lease_agreement_${driverId}.docx`);
      await ctx.replyWithDocument(doc, { caption: `–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è ID ${driverId}` });
    } catch (error: any) {
      console.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è ID ${driverId}:`, error);
      await ctx.answerCallbackQuery({ text: `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, show_alert: true });
    }
  });

  // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π ---
  bot.callbackQuery(/instruction_(\w+)/, async (ctx) => {
    const instructionKey = ctx.match[1] as keyof typeof instructions;
    if (!instructions[instructionKey]) return ctx.answerCallbackQuery({ text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.' });

    try {
      const filePath = path.join(INSTRUCTIONS_DIR, `${instructionKey}.md`);
      const content = await fs.readFile(filePath, 'utf-8');
      const keyboard = new InlineKeyboard().text('‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º', 'back_to_instructions');
      await ctx.editMessageText(content, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      await ctx.answerCallbackQuery({ text: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.', show_alert: true });
    }
  });

  bot.callbackQuery('back_to_instructions', async (ctx) => {
    const { text, keyboard } = getInstructionsMenu();
    await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: keyboard });
  });

  bot.callbackQuery('open_webapp', (ctx) => {
    const keyboard = new InlineKeyboard()
      .url('üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-—Ñ–æ—Ä–º—É', WEBAPP_URL)
      .row()
      .text('üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π', 'drivers_page_1')
      .text('üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', 'open_instructions');
    
    ctx.editMessageText(
      'üåê **–í–µ–±-—Ñ–æ—Ä–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è–º–∏**\n\n' +
      '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —É–¥–æ–±–Ω—É—é –≤–µ–±-—Ñ–æ—Ä–º—É –¥–ª—è:\n' +
      '‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π\n' +
      '‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö\n' +
      '‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π\n' +
      '‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏',
      { parse_mode: 'Markdown', reply_markup: keyboard }
    );
  });

  bot.callbackQuery('open_instructions', (ctx) => {
    const { text, keyboard } = getInstructionsMenu();
    ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: keyboard });
  });

  // --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---
  bot.command('schedule', async (ctx) => {
    try {
      const today = new Date();
      const currentMonth = await scheduleService.getCalendarMonth(today.getFullYear(), today.getMonth() + 1);
      
      let text = `üìÖ **–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –Ω–∞ ${today.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })}**\n\n`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      const todayStr = today.toISOString().split('T')[0];
      const todaySchedules = currentMonth.weeks
        .flatMap(week => week.days)
        .find(day => day.date === todayStr)?.schedules || [];
      
      if (todaySchedules.length > 0) {
        text += `**–°–µ–≥–æ–¥–Ω—è (${today.toLocaleDateString('ru-RU')}):**\n`;
        todaySchedules.forEach(schedule => {
          const statusIcon = {
            working: 'üü¢',
            off: 'üî¥',
            repair: 'üîß',
            reserve: 'üü°',
            vacation: 'üèñÔ∏è',
            loading: '‚è∞'
          }[schedule.status];
          
          text += `${statusIcon} ${schedule.driver.personalData.lastName} ${schedule.driver.personalData.firstName}\n`;
          text += `   ${schedule.start_time} - ${schedule.end_time}\n`;
          if (schedule.route_info) text += `   –ú–∞—Ä—à—Ä—É—Ç: ${schedule.route_info}\n`;
          text += '\n';
        });
      } else {
        text += `–°–µ–≥–æ–¥–Ω—è (${today.toLocaleDateString('ru-RU')}) –≥—Ä–∞—Ñ–∏–∫–æ–≤ –Ω–µ—Ç.\n\n`;
      }
      
      const keyboard = new InlineKeyboard()
        .text('üåê –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å', 'open_schedule_webapp')
        .row()
        .text('üöó –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã', 'current_trips')
        .text('üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π', 'drivers_page_1');
      
      await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã.');
    }
  });

  bot.command('current', async (ctx) => {
    try {
      const currentSchedules = await scheduleService.getCurrentSchedules();
      
      if (currentSchedules.length === 0) {
        await ctx.reply('üöó **–¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã**\n\n–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π—Å–æ–≤.');
        return;
      }
      
      let text = `üöó **–¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã**\n\n`;
      text += `–í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU')}\n\n`;
      
      currentSchedules.forEach(schedule => {
        text += `üü¢ **${schedule.driver.personalData.lastName} ${schedule.driver.personalData.firstName}**\n`;
        text += `–ê–≤—Ç–æ: ${schedule.driver.vehicle.make} ${schedule.driver.vehicle.model} (${schedule.driver.vehicle.licensePlate})\n`;
        text += `–í—Ä–µ–º—è: ${schedule.start_time} - ${schedule.end_time}\n`;
        if (schedule.route_info) text += `–ú–∞—Ä—à—Ä—É—Ç: ${schedule.route_info}\n`;
        text += '\n';
      });
      
      const keyboard = new InlineKeyboard()
        .text('üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã', 'schedule_current')
        .row()
        .text('üåê –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å', 'open_schedule_webapp');
      
      await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ä–µ–π—Å–æ–≤:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–π—Å–æ–≤.');
    }
  });

  // Callback –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  bot.callbackQuery('open_schedule_webapp', (ctx) => {
    const keyboard = new InlineKeyboard()
      .url('üìÖ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å', `${WEBAPP_URL}#/schedule`)
      .row()
      .text('üöó –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã', 'current_trips')
      .text('üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π', 'drivers_page_1');
    
    ctx.editMessageText(
      'üìÖ **–ö–∞–ª–µ–Ω–¥–∞—Ä—å –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã**\n\n' +
      '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è:\n' +
      '‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –¥–Ω—è–º\n' +
      '‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤\n' +
      '‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö\n' +
      '‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π',
      { parse_mode: 'Markdown', reply_markup: keyboard }
    );
  });

  bot.callbackQuery('schedule_current', async (ctx) => {
    await ctx.answerCallbackQuery();
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã
    try {
      const today = new Date();
      const currentMonth = await scheduleService.getCalendarMonth(today.getFullYear(), today.getMonth() + 1);
      
      let text = `üìÖ **–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –Ω–∞ ${today.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })}**\n\n`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      const todayStr = today.toISOString().split('T')[0];
      const todaySchedules = currentMonth.weeks
        .flatMap(week => week.days)
        .find(day => day.date === todayStr)?.schedules || [];
      
      if (todaySchedules.length > 0) {
        text += `**–°–µ–≥–æ–¥–Ω—è (${today.toLocaleDateString('ru-RU')}):**\n`;
        todaySchedules.forEach(schedule => {
          const statusIcon = {
            working: 'üü¢',
            off: 'üî¥',
            repair: 'üîß',
            reserve: 'üü°',
            vacation: 'üèñÔ∏è',
            loading: '‚è∞'
          }[schedule.status];
          
          text += `${statusIcon} ${schedule.driver.personalData.lastName} ${schedule.driver.personalData.firstName}\n`;
          text += `   ${schedule.start_time} - ${schedule.end_time}\n`;
          if (schedule.route_info) text += `   –ú–∞—Ä—à—Ä—É—Ç: ${schedule.route_info}\n`;
          text += '\n';
        });
      } else {
        text += `–°–µ–≥–æ–¥–Ω—è (${today.toLocaleDateString('ru-RU')}) –≥—Ä–∞—Ñ–∏–∫–æ–≤ –Ω–µ—Ç.\n\n`;
      }
      
      const keyboard = new InlineKeyboard()
        .text('üåê –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å', 'open_schedule_webapp')
        .row()
        .text('üöó –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã', 'current_trips')
        .text('üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π', 'drivers_page_1');
      
      await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:', error);
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã.');
    }
  });

  bot.callbackQuery('current_trips', async (ctx) => {
    await ctx.answerCallbackQuery();
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã
    try {
      const currentSchedules = await scheduleService.getCurrentSchedules();
      
      if (currentSchedules.length === 0) {
        await ctx.editMessageText('üöó **–¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã**\n\n–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π—Å–æ–≤.');
        return;
      }
      
      let text = `üöó **–¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã**\n\n`;
      text += `–í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU')}\n\n`;
      
      currentSchedules.forEach(schedule => {
        text += `üü¢ **${schedule.driver.personalData.lastName} ${schedule.driver.personalData.firstName}**\n`;
        text += `–ê–≤—Ç–æ: ${schedule.driver.vehicle.make} ${schedule.driver.vehicle.model} (${schedule.driver.vehicle.licensePlate})\n`;
        text += `–í—Ä–µ–º—è: ${schedule.start_time} - ${schedule.end_time}\n`;
        if (schedule.route_info) text += `–ú–∞—Ä—à—Ä—É—Ç: ${schedule.route_info}\n`;
        text += '\n';
      });
      
      const keyboard = new InlineKeyboard()
        .text('üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã', 'schedule_current')
        .row()
        .text('üåê –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å', 'open_schedule_webapp');
      
      await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ä–µ–π—Å–æ–≤:', error);
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–π—Å–æ–≤.');
    }
  });

  // --- –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ---
  bot.callbackQuery(/(todo_list|calculate_route|edit_driver)_(\d+)/, async (ctx) => {
    await ctx.answerCallbackQuery({
      text: '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üë®‚Äçüíª',
      show_alert: true,
    });
  });

  bot.callbackQuery(/delete_driver_(\d+)/, async (ctx) => {
    const driverId = parseInt((ctx.match as RegExpMatchArray)[1]!, 10);
    const driver = await driverService.findDriverById(driverId);
    if (!driver) return ctx.answerCallbackQuery({ text: '–≠—Ç–æ—Ç –≤–æ–¥–∏—Ç–µ–ª—å —É–∂–µ —É–¥–∞–ª–µ–Ω.', show_alert: true });
    const text = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è *${driver.personalData.lastName}*?`;
    const keyboard = new InlineKeyboard()
      .text('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', `confirm_delete_${driverId}`)
      .text('‚ùå –û—Ç–º–µ–Ω–∞', `cancel_delete`);
    await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    await ctx.answerCallbackQuery();
  });

  bot.callbackQuery(/confirm_delete_(\d+)/, async (ctx) => {
    const driverId = parseInt((ctx.match as RegExpMatchArray)[1]!, 10);
    try {
      await driverService.deleteDriver(driverId);
      await ctx.editMessageText(`‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —Å ID ${driverId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
    } catch (error) {
      await ctx.editMessageText(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è —Å ID ${driverId}.`);
    }
  });

  bot.callbackQuery('cancel_delete', async (ctx) => {
    await ctx.deleteMessage();
  });

  // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---
  bot.catch((err) => console.error(`–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:`, err));

  return bot;
}

// --- –ó–∞–ø—É—Å–∫ ---
export async function startBot(driverService: DriverService, scheduleService: ScheduleService) {
  const BOT_TOKEN = process.env.BOT_TOKEN;
  if (!BOT_TOKEN) {
    console.error('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞.');
    process.exit(1);
  }
  const bot = createBot(BOT_TOKEN, driverService, scheduleService);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –±–æ—Ç–æ–º
  notificationService.setBot(bot);
  
  console.log('–ó–∞–ø—É—Å–∫–∞—é Telegram-–±–æ—Ç–∞...');
  await bot.start();
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url.startsWith('file://') && process.argv[1] === new URL(import.meta.url).pathname) {
  const driverService = new DriverService();
  const scheduleService = new ScheduleService();
  startBot(driverService, scheduleService);
}
