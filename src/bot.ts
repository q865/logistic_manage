
// src/bot.ts
import 'dotenv/config';
import { Bot, InlineKeyboard } from 'grammy';
import { DriverService } from './services/driverService.js';
import type { Driver } from './models/Driver.js';

const PAGE_LIMIT = 5;

// –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
export function createBot(token: string, driverService: DriverService) {
  const bot = new Bot(token);

  // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
  const formatDriverDetails = (driver: Driver): string => {
    return `**üë§ –í–æ–¥–∏—Ç–µ–ª—å ID: ${driver.id}**\n` +
           `*–§–ò–û:* ${driver.personalData.lastName} ${driver.personalData.firstName} ${driver.personalData.patronymic || ''}\n` +
           `*–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${new Date(driver.personalData.birthDate).toLocaleDateString('ru-RU')}\n\n` +
           `**üõÇ –ü–∞—Å–ø–æ—Ä—Ç**\n` +
           `*–°–µ—Ä–∏—è/–ù–æ–º–µ—Ä:* ${driver.passport.series} ${driver.passport.number}\n` +
           `*–ö–µ–º –≤—ã–¥–∞–Ω:* ${driver.passport.issuedBy}\n` +
           `*–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:* ${new Date(driver.passport.issueDate).toLocaleDateString('ru-RU')}\n\n` +
           `**üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å**\n` +
           `*–ú–∞—Ä–∫–∞/–ú–æ–¥–µ–ª—å:* ${driver.vehicle.make} ${driver.vehicle.model}\n` +
           `*–ì–æ—Å. –Ω–æ–º–µ—Ä:* ${driver.vehicle.licensePlate}\n` +
           `*–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:* ${driver.vehicle.year}
` +           `*VIN:* ${driver.vehicle.vin}`
  };

  const createDriversListMessage = async (page = 1) => {
    const { drivers, total } = await driverService.getAllDrivers({ page, limit: PAGE_LIMIT });
    const totalPages = Math.ceil(total / PAGE_LIMIT) || 1;
    let text = `**–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages})**\n\n`;
    if (total === 0) {
      text = '–í–æ–¥–∏—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.';
    } else {
      text += drivers.map(d => 
        `*ID:* ${d.id} | *–§–ò–û:* ${d.personalData.lastName} ${d.personalData.firstName}\n` +
        `*–ê–≤—Ç–æ:* ${d.vehicle.make} ${d.vehicle.model} (${d.vehicle.licensePlate})`
      ).join('\n--------------------\n');
    }
    const keyboard = new InlineKeyboard();
    if (page > 1) keyboard.text('‚óÄÔ∏è –ù–∞–∑–∞–¥', `drivers_page_${page - 1}`);
    if (page < totalPages) keyboard.text('–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', `drivers_page_${page + 1}`);
    return { text, keyboard };
  };

  // --- –ö–æ–º–∞–Ω–¥—ã ---
  bot.command(['start', 'help'], (ctx) => {
    ctx.reply(
      'üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Driver Bot!**\n\n' +
      '**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n' +
      '/drivers - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π\n' +
      '/driver <ID> - –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ',
      { parse_mode: 'Markdown' }
    );
  });

  bot.command('drivers', async (ctx) => {
    try {
      const { text, keyboard } = await createDriversListMessage(1);
      await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π.');
    }
  });

  bot.command('driver', async (ctx) => {
    const driverId = parseInt(ctx.match, 10);
    if (isNaN(driverId)) return ctx.reply('–£–∫–∞–∂–∏—Ç–µ ID. –ü—Ä–∏–º–µ—Ä: `/driver 123`');
    try {
      const driver = await driverService.findDriverById(driverId);
      if (!driver) return ctx.reply(`–í–æ–¥–∏—Ç–µ–ª—å —Å ID ${driverId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      const text = formatDriverDetails(driver);
      const keyboard = new InlineKeyboard()
        .text('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Å–∫–æ—Ä–æ)', `edit_driver_${driverId}`)
        .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', `delete_driver_${driverId}`);
      await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–æ–¥–∏—Ç–µ–ª—è.');
    }
  });

  // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ---
  bot.callbackQuery(/drivers_page_(\d+)/, async (ctx) => {
    const page = parseInt(ctx.match[1]!, 10);
    try {
      const { text, keyboard } = await createDriversListMessage(page);
      await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    } catch (error) {
      await ctx.answerCallbackQuery({ text: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.' });
    }
  });

  bot.callbackQuery(/delete_driver_(\d+)/, async (ctx) => {
    const driverId = parseInt(ctx.match[1]!, 10);
    const driver = await driverService.findDriverById(driverId);
    if (!driver) return ctx.answerCallbackQuery({ text: '–≠—Ç–æ—Ç –≤–æ–¥–∏—Ç–µ–ª—å —É–∂–µ —É–¥–∞–ª–µ–Ω.', show_alert: true });
    const text = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è *${driver.personalData.lastName}*?`;
    const keyboard = new InlineKeyboard()
      .text('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', `confirm_delete_${driverId}`)
      .text('‚ùå –û—Ç–º–µ–Ω–∞', `cancel_delete`);
    await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
    await ctx.answerCallbackQuery();
  });

  bot.callbackQuery(/confirm_delete_(\d+)/, async (ctx) => {
    const driverId = parseInt(ctx.match[1]!, 10);
    try {
      await driverService.deleteDriver(driverId);
      await ctx.editMessageText(`‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —Å ID ${driverId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
    } catch (error) {
      await ctx.editMessageText(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è —Å ID ${driverId}.`);
    }
  });

  bot.callbackQuery('cancel_delete', async (ctx) => {
    await ctx.deleteMessage();
  });

  // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---
  bot.catch((err) => console.error(`–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:`, err));

  return bot;
}

// --- –ó–∞–ø—É—Å–∫ ---
export async function startBot() {
  const BOT_TOKEN = process.env.BOT_TOKEN;
  if (!BOT_TOKEN) {
    console.error('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞.');
    process.exit(1);
  }
  const driverService = new DriverService();
  const bot = createBot(BOT_TOKEN, driverService);
  
  console.log('–ó–∞–ø—É—Å–∫–∞—é Telegram-–±–æ—Ç–∞...');
  await bot.start();
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url.startsWith('file://') && process.argv[1] === new URL(import.meta.url).pathname) {
  startBot();
}
