// src/bot.ts
import 'dotenv/config';
import { Bot, InlineKeyboard } from 'grammy';
import { DriverService } from './services/driverService.js';
import type { Driver } from './models/Driver.js';

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  console.error('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.');
  process.exit(1);
}

const bot = new Bot(BOT_TOKEN);
const driverService = new DriverService();
const PAGE_LIMIT = 5;

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function formatDriverDetails(driver: Driver): string {
  // ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  return `**üë§ –í–æ–¥–∏—Ç–µ–ª—å ID: ${driver.id}**\n` +
         `*–§–ò–û:* ${driver.personalData.lastName} ${driver.personalData.firstName} ${driver.personalData.patronymic || ''}\n` +
         `*–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${new Date(driver.personalData.birthDate).toLocaleDateString('ru-RU')}\n\n` +
         `**üõÇ –ü–∞—Å–ø–æ—Ä—Ç**\n` +
         `*–°–µ—Ä–∏—è/–ù–æ–º–µ—Ä:* ${driver.passport.series} ${driver.passport.number}\n` +
         `*–ö–µ–º –≤—ã–¥–∞–Ω:* ${driver.passport.issuedBy}\n` +
         `*–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:* ${new Date(driver.passport.issueDate).toLocaleDateString('ru-RU')}\n\n` +
         `**üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å**\n` +
         `*–ú–∞—Ä–∫–∞/–ú–æ–¥–µ–ª—å:* ${driver.vehicle.make} ${driver.vehicle.model}\n` +
         `*–ì–æ—Å. –Ω–æ–º–µ—Ä:* ${driver.vehicle.licensePlate}\n` +
         `*–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:* ${driver.vehicle.year}\n` + 
         `*VIN:* 
${driver.vehicle.vin}
`;
}

async function createDriversListMessage(page = 1) {
  // ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const { drivers, total } = await driverService.getAllDrivers({ page, limit: PAGE_LIMIT });
  const totalPages = Math.ceil(total / PAGE_LIMIT);
  let text = `**–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages})**\n\n`;
  if (total === 0) {
    text = '–í–æ–¥–∏—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.';
  } else {
    text += drivers.map(d => 
      `*ID:* ${d.id} | *–§–ò–û:* ${d.personalData.lastName} ${d.personalData.firstName}\n` +
      `*–ê–≤—Ç–æ:* ${d.vehicle.make} ${d.vehicle.model} (${d.vehicle.licensePlate})`
    ).join('\n--------------------\n');
  }
  const keyboard = new InlineKeyboard();
  if (page > 1) keyboard.text('‚óÄÔ∏è –ù–∞–∑–∞–¥', `drivers_page_${page - 1}`);
  if (page < totalPages) keyboard.text('–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', `drivers_page_${page + 1}`);
  return { text, keyboard };
}

// --- –ö–æ–º–∞–Ω–¥—ã ---
bot.command(['start', 'help'], (ctx) => {
  // ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  ctx.reply(
    'üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Driver Bot!**\n\n' +
    '**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n' +
    '/drivers - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π\n' +
    '/driver <ID> - –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ',
    { parse_mode: 'Markdown' }
  );
});

bot.command('drivers', async (ctx) => {
  // ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  try {
    const { text, keyboard } = await createDriversListMessage(1);
    await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /drivers:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π.');
  }
});

bot.command('driver', async (ctx) => {
  // ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const driverId = parseInt(ctx.match, 10);
  if (isNaN(driverId)) {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤–æ–¥–∏—Ç–µ–ª—è. –ù–∞–ø—Ä–∏–º–µ—Ä: `/driver 123`');
  }
  try {
    const driver = await driverService.findDriverById(driverId);
    if (!driver) {
      return ctx.reply(`–í–æ–¥–∏—Ç–µ–ª—å —Å ID ${driverId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }
    const text = formatDriverDetails(driver);
    const keyboard = new InlineKeyboard()
      .text('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Å–∫–æ—Ä–æ)', `edit_driver_${driverId}`)
      .text('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', `delete_driver_${driverId}`);
    await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤ /driver ${driverId}:`, error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–æ–¥–∏—Ç–µ–ª—è.');
  }
});

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ---
bot.callbackQuery(/drivers_page_(\d+)/, async (ctx) => {
  // ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const page = parseInt(ctx.match[1]!, 10);
  try {
    const { text, keyboard } = await createDriversListMessage(page);
    await ctx.editMessageText(text, { parse_mode: 'Markdown', reply_markup: keyboard });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
    await ctx.answerCallbackQuery({ text: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.' });
  }
});

// –®–∞–≥ 1: –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
bot.callbackQuery(/delete_driver_(\d+)/, async (ctx) => {
  const driverId = parseInt(ctx.match[1]!, 10);
  const driver = await driverService.findDriverById(driverId);
  if (!driver) {
    return ctx.answerCallbackQuery({ text: '–≠—Ç–æ—Ç –≤–æ–¥–∏—Ç–µ–ª—å —É–∂–µ —É–¥–∞–ª–µ–Ω.', show_alert: true });
  }
  
  const text = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è *${driver.personalData.lastName} ${driver.personalData.firstName}* (ID: ${driverId})?`;
  const keyboard = new InlineKeyboard()
    .text('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', `confirm_delete_${driverId}`)
    .text('‚ùå –û—Ç–º–µ–Ω–∞', `cancel_delete_${driverId}`);
    
  await ctx.reply(text, { parse_mode: 'Markdown', reply_markup: keyboard });
  await ctx.answerCallbackQuery(); // –°–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
});

// –®–∞–≥ 2: –í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ
bot.callbackQuery(/confirm_delete_(\d+)/, async (ctx) => {
  const driverId = parseInt(ctx.match[1]!, 10);
  try {
    await driverService.deleteDriver(driverId);
    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    await ctx.editMessageText(`‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —Å ID ${driverId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è ${driverId}:`, error);
    await ctx.editMessageText(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è —Å ID ${driverId}.`);
  }
});

// –®–∞–≥ 3: –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ
bot.callbackQuery(/cancel_delete_(\d+)/, async (ctx) => {
  // –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
  await ctx.deleteMessage();
});


// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---
bot.catch((err) => {
  console.error(`–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:`, err);
});

// --- –ó–∞–ø—É—Å–∫ ---
export const startBot = async () => {
  console.log('–ó–∞–ø—É—Å–∫–∞—é Telegram-–±–æ—Ç–∞...');
  await bot.start();
};

if (import.meta.url.startsWith('file://') && process.argv[1] === new URL(import.meta.url).pathname) {
  startBot();
}