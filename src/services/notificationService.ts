// src/services/notificationService.ts
import { Bot } from 'grammy';

export class NotificationService {
  private bot: Bot | null = null;
  private adminChatIds: string[] = [];

  constructor() {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const adminIds = process.env.ADMIN_CHAT_IDS;
    if (adminIds) {
      this.adminChatIds = adminIds.split(',').map(id => id.trim());
    }
  }

  setBot(bot: Bot) {
    this.bot = bot;
  }

  async notifyDriverCreated(driverId: number, driverName: string) {
    if (!this.bot) {
      console.warn('–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      return;
    }

    const message = `üöó **–ù–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n` +
                   `*ID:* ${driverId}\n` +
                   `*–§–ò–û:* ${driverName}\n` +
                   `*–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n` +
                   `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /driver ${driverId} –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π`;

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
      for (const chatId of this.adminChatIds) {
        await this.bot.api.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      }
      
      console.log(`[${new Date().toISOString()}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –≤–æ–¥–∏—Ç–µ–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${this.adminChatIds.length} —á–∞—Ç(–æ–≤)`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  async notifyDriverUpdated(driverId: number, driverName: string) {
    if (!this.bot) {
      console.warn('–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      return;
    }

    const message = `‚úèÔ∏è **–î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**\n\n` +
                   `*ID:* ${driverId}\n` +
                   `*–§–ò–û:* ${driverName}\n` +
                   `*–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}\n\n` +
                   `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /driver ${driverId} –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π`;

    try {
      for (const chatId of this.adminChatIds) {
        await this.bot.api.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      }
      
      console.log(`[${new Date().toISOString()}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${this.adminChatIds.length} —á–∞—Ç(–æ–≤)`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  async notifyDriverDeleted(driverId: number, driverName: string) {
    if (!this.bot) {
      console.warn('–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      return;
    }

    const message = `üóëÔ∏è **–í–æ–¥–∏—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!**\n\n` +
                   `*ID:* ${driverId}\n` +
                   `*–§–ò–û:* ${driverName}\n` +
                   `*–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}`;

    try {
      for (const chatId of this.adminChatIds) {
        await this.bot.api.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      }
      
      console.log(`[${new Date().toISOString()}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${this.adminChatIds.length} —á–∞—Ç(–æ–≤)`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  async notifyScheduleCreated(scheduleId: number, driverName: string, date: string, status: string) {
    if (!this.bot) {
      console.warn('–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      return;
    }
    const statusIcons: Record<string, string> = {
      working: 'üü¢',
      off: 'üî¥',
      repair: 'üîß',
      reserve: 'üü°',
      vacation: 'üèñÔ∏è',
      loading: '‚è∞'
    };
    const statusIcon = statusIcons[status] || 'üìÖ';
    
    const message = `üìÖ **–ù–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω!**\n\n` +
                   `*ID:* ${scheduleId}\n` +
                   `*–í–æ–¥–∏—Ç–µ–ª—å:* ${driverName}\n` +
                   `*–î–∞—Ç–∞:* ${new Date(date).toLocaleDateString('ru-RU')}\n` +
                   `*–°—Ç–∞—Ç—É—Å:* ${statusIcon} ${status}\n` +
                   `*–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:* ${new Date().toLocaleString('ru-RU')}`;
    try {
      for (const chatId of this.adminChatIds) {
        await this.bot.api.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      }
      console.log(`[${new Date().toISOString()}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –≥—Ä–∞—Ñ–∏–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${this.adminChatIds.length} —á–∞—Ç(–æ–≤)`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  async notifyScheduleUpdated(scheduleId: number, driverName: string, date: string, status: string) {
    if (!this.bot) {
      console.warn('–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      return;
    }
    const statusIcons: Record<string, string> = {
      working: 'üü¢',
      off: 'üî¥',
      repair: 'üîß',
      reserve: 'üü°',
      vacation: 'üèñÔ∏è',
      loading: '‚è∞'
    };
    const statusIcon = statusIcons[status] || 'üìÖ';
    
    const message = `‚úèÔ∏è **–ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n` +
                   `*ID:* ${scheduleId}\n` +
                   `*–í–æ–¥–∏—Ç–µ–ª—å:* ${driverName}\n` +
                   `*–î–∞—Ç–∞:* ${new Date(date).toLocaleDateString('ru-RU')}\n` +
                   `*–°—Ç–∞—Ç—É—Å:* ${statusIcon} ${status}\n` +
                   `*–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:* ${new Date().toLocaleString('ru-RU')}`;
    try {
      for (const chatId of this.adminChatIds) {
        await this.bot.api.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      }
      console.log(`[${new Date().toISOString()}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${this.adminChatIds.length} —á–∞—Ç(–æ–≤)`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  async notifyScheduleDeleted(scheduleId: number, driverName: string, date: string) {
    if (!this.bot) {
      console.warn('–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      return;
    }
    const message = `üóëÔ∏è **–ì—Ä–∞—Ñ–∏–∫ —É–¥–∞–ª–µ–Ω!**\n\n` +
                   `*ID:* ${scheduleId}\n` +
                   `*–í–æ–¥–∏—Ç–µ–ª—å:* ${driverName}\n` +
                   `*–î–∞—Ç–∞:* ${new Date(date).toLocaleDateString('ru-RU')}\n` +
                   `*–í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è:* ${new Date().toLocaleString('ru-RU')}`;
    try {
      for (const chatId of this.adminChatIds) {
        await this.bot.api.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      }
      console.log(`[${new Date().toISOString()}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${this.adminChatIds.length} —á–∞—Ç(–æ–≤)`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const notificationService = new NotificationService();
