/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≥—Ä—É–∑–∞—Ö
 */

import ExcelParser from '../parsers/excelParser.js';
import { DeliveryService } from './deliveryService.js';
import type { Delivery } from '../models/Delivery.js';

interface ProcessingResult {
  success: boolean;
  data?: any;
  deliveryId?: number | undefined;
  formatted?: string;
  error?: string;
  rawData?: any[];
}

interface ProcessingSummary {
  total: number;
  success: number;
  error: number;
}

interface ProcessingResponse {
  results: ProcessingResult[];
  summary: ProcessingSummary;
}

export class ExcelProcessingService {
  private deliveryService: DeliveryService;

  constructor() {
    this.deliveryService = new DeliveryService();
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Excel —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–∞—Ö
   * @param fileBuffer - –±—É—Ñ–µ—Ä —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º Excel —Ñ–∞–π–ª–∞
   * @returns Promise<ProcessingResponse> - –º–∞—Å—Å–∏–≤ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async processExcelFile(fileBuffer: Buffer): Promise<ProcessingResponse> {
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const mockExcelData = this.getMockExcelData();
      
      const results: ProcessingResult[] = [];
      let successCount = 0;
      let errorCount = 0;

      for (const row of mockExcelData) {
        try {
          const parsedData = ExcelParser.parseRow(row);
          
                  if (parsedData && ExcelParser.validate(parsedData)) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
          const delivery = await this.saveDeliveryToDatabase(parsedData);
          results.push({
            success: true,
            data: parsedData,
            deliveryId: delivery?.id,
            formatted: ExcelParser.format(parsedData)
          });
          successCount++;
        } else {
            results.push({
              success: false,
              error: '–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é',
              rawData: row
            });
            errorCount++;
          }
        } catch (error: any) {
          results.push({
            success: false,
            error: `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
            rawData: row
          });
          errorCount++;
        }
      }

      return {
        results,
        summary: {
          total: mockExcelData.length,
          success: successCount,
          error: errorCount
        }
      };

    } catch (error: any) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞: ${error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   * @param parsedData - —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns Promise<Delivery | null> - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
   */
  private async saveDeliveryToDatabase(parsedData: any): Promise<Delivery | null> {
    try {
      const deliveryData = {
        orderNumber: parsedData.order.orderNumber,
        customerName: parsedData.order.customerName,
        orderDate: new Date(parsedData.order.orderDate.split('.').reverse().join('-')),
        orderTime: parsedData.order.orderTime,
        deliveryDate: new Date(parsedData.order.deliveryDate.split('.').reverse().join('-')),
        deliveryTime: parsedData.order.deliveryTime,
        deliveryId: parsedData.order.deliveryId,
        cargoVolume: parsedData.cargo.volume,
        cargoWeight: parsedData.cargo.weight,
        cargoLength: parsedData.cargo.length,
        cargoAdditionalInfo: parsedData.cargo.additionalInfo,
        routeDate: parsedData.route.date,
        routeRegion: parsedData.route.region,
        routeTime: parsedData.route.time,
        routeType: parsedData.route.type,
        routeNumber: parsedData.route.number,
        company: parsedData.company,
        status: 'pending',
        createdAt: new Date(),
        updatedAt: new Date()
      };

      // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ createDelivery –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      // const delivery = await this.deliveryService.createDelivery(deliveryData);
      console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', deliveryData);
      return null;

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', error);
      return null;
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Excel –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
   * @returns Array - –º–∞—Å—Å–∏–≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
   */
  private getMockExcelData(): Array<Array<string>> {
    return [
      [
        "01.09.25_77_00—á_–í–ò–ü_19",
        "3.32 –∫—É–±.–º/871 –∫–≥/1.010 –º/–ù–µ—Ç",
        "13908.–ó–∞–∫–∞–∑–∞–Ω–æ.01\\.09\\.2025 00:00:00.–ö—É–ª—É—à–æ–≤ –ú–∞—Ä–∞—Ç –®–∞–π–ª–æ–æ–±–∞–µ–≤–∏—á........01\\.09\\.2025 01:30:00..202",
        '–û–û–û "–ì–†–£–ó –°–ï–†–í–ò–°"'
      ],
      [
        "02.09.25_78_12—á_–°–¢–ê–ù–î–ê–†–¢_25",
        "2.15 –∫—É–±.–º/450 –∫–≥/0.850 –º/–î–∞",
        "13909.–ó–∞–∫–∞–∑–∞–Ω–æ.02\\.09\\.2025 12:00:00.–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á........02\\.09\\.2025 14:30:00..203",
        '–û–û–û "–ì–†–£–ó –°–ï–†–í–ò–°"'
      ],
      [
        "03.09.25_79_18—á_–≠–ö–°–ü–†–ï–°–°_31",
        "1.85 –∫—É–±.–º/320 –∫–≥/0.750 –º/–ù–µ—Ç",
        "13910.–ó–∞–∫–∞–∑–∞–Ω–æ.03\\.09\\.2025 18:00:00.–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á........03\\.09\\.2025 20:00:00..204",
        '–û–û–û "–ì–†–£–ó –°–ï–†–í–ò–°"'
      ]
    ];
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ Telegram
   * @param results - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
   * @returns string - –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  formatProcessingResults(results: ProcessingResponse): string {
    const { summary } = results;
    
    let text = `üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞**\n\n`;
    text += `üìÅ **–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫**: ${summary.total}\n`;
    text += `‚úÖ **–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ**: ${summary.success}\n`;
    text += `‚ùå **–û—à–∏–±–æ–∫**: ${summary.error}\n\n`;

    if (summary.success > 0) {
      text += `üéØ **–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:**\n`;
      results.results
        .filter((r: ProcessingResult) => r.success)
        .forEach((result: ProcessingResult, index: number) => {
          if (result.data) {
            text += `${index + 1}. –ó–∞–∫–∞–∑ ‚Ññ${result.data.order.orderNumber}\n`;
            text += `   –ö–ª–∏–µ–Ω—Ç: ${result.data.order.customerName}\n`;
            text += `   –ì—Ä—É–∑: ${result.data.cargo.volume} –∫—É–±.–º, ${result.data.cargo.weight} –∫–≥\n`;
            text += `   –ú–∞—Ä—à—Ä—É—Ç: ${result.data.route.date} ${result.data.route.region}\n\n`;
          }
        });
    }

    if (summary.error > 0) {
      text += `‚ö†Ô∏è **–°—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏:**\n`;
      results.results
        .filter((r: ProcessingResult) => !r.success)
        .forEach((result: ProcessingResult, index: number) => {
          text += `${index + 1}. ${result.error}\n`;
        });
    }

    return text;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
   * @returns Promise<Object> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getProcessingStats(): Promise<any> {
    try {
      const allDeliveries = await this.deliveryService.getAllDeliveries();
      const totalDeliveries = allDeliveries.length;
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
      // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª–µ status –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏
      const pendingDeliveries = allDeliveries.filter(d => d.orderStatus === '–ó–∞–∫–∞–∑–∞–Ω–æ');
      const completedDeliveries = allDeliveries.filter(d => d.orderStatus === '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');

      return {
        total: totalDeliveries,
        pending: pendingDeliveries.length,
        completed: completedDeliveries.length,
        lastUpdated: new Date()
      };
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {
        total: 0,
        pending: 0,
        completed: 0,
        lastUpdated: new Date()
      };
    }
  }
}
