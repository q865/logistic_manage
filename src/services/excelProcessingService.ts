/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≥—Ä—É–∑–∞—Ö
 */

import ExcelParser from '../parsers/excelParser.js';
import { TripService } from './tripService.js';
import type { ParsedRowData } from '../parsers/excelParser.js';
import { DeliveryService } from './deliveryService.js';
import type { Delivery } from '../models/Delivery.js';

interface ProcessingResult {
  success: boolean;
  data?: any;
  deliveryId?: number | undefined;
  formatted?: string;
  error?: string;
  rawData?: any[];
}

interface ProcessingSummary {
  total: number;
  success: number;
  error: number;
}

interface ProcessingResponse {
  results: ProcessingResult[];
  summary: ProcessingSummary;
}

export class ExcelProcessingService {
  private deliveryService: DeliveryService;
  private tripService: TripService;

  constructor() {
    this.deliveryService = new DeliveryService();
    this.tripService = new TripService();
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Excel —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–∞—Ö
   * @param fileBuffer - –±—É—Ñ–µ—Ä —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º Excel —Ñ–∞–π–ª–∞
   * @returns Promise<ProcessingResponse> - –º–∞—Å—Å–∏–≤ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async processExcelFile(fileBuffer: Buffer): Promise<any> {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É Excel —Ñ–∞–π–ª–∞...');
      
      // –ü–∞—Ä—Å–∏–º Excel –¥–∞–Ω–Ω—ã–µ (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ)
      const parsedData = this.getMockExcelData().map(row => ExcelParser.parseRow(row)).filter((data): data is ParsedRowData => data !== null);
      
      if (!parsedData || parsedData.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞');
      }

      console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ ${parsedData.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);

      // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫–∏
      const deliveryResults = await this.createDeliveriesFromExcelData(parsedData);
      
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–π—Å—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è —Å ID 1)
      const tripResults = await this.createTripsFromExcelData(parsedData, 1);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const results = {
        success: true,
        totalRows: parsedData.length,
        tripsCreated: tripResults.created,
        deliveriesCreated: deliveryResults.created,
        tripErrors: tripResults.errors,
        deliveryErrors: deliveryResults.errors,
        results: parsedData.map((data, index) => ({
          row: index + 1,
          success: true,
          data,
          formatted: this.formatRowData(data)
        }))
      };

      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–æ ${tripResults.created} —Ä–µ–π—Å–æ–≤, ${deliveryResults.created} –¥–æ—Å—Ç–∞–≤–æ–∫`);
      
      return results;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞:', error);
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   * @param parsedData - —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns Promise<Delivery | null> - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
   */
  private async saveDeliveryToDatabase(parsedData: any): Promise<Delivery | null> {
    try {
      const deliveryData = {
        orderNumber: parsedData.order.orderNumber,
        customerName: parsedData.order.customerName,
        orderDate: new Date(parsedData.order.orderDate.split('.').reverse().join('-')),
        orderTime: parsedData.order.orderTime,
        deliveryDate: new Date(parsedData.order.deliveryDate.split('.').reverse().join('-')),
        deliveryTime: parsedData.order.deliveryTime,
        deliveryId: parsedData.order.deliveryId,
        cargoVolume: parsedData.cargo.volume,
        cargoWeight: parsedData.cargo.weight,
        cargoLength: parsedData.cargo.length,
        cargoAdditionalInfo: parsedData.cargo.additionalInfo,
        routeDate: parsedData.route.date,
        routeRegion: parsedData.route.region,
        routeTime: parsedData.route.time,
        routeType: parsedData.route.type,
        routeNumber: parsedData.route.number,
        company: parsedData.company,
        status: 'pending',
        createdAt: new Date(),
        updatedAt: new Date()
      };

      // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ createDelivery –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      // const delivery = await this.deliveryService.createDelivery(deliveryData);
      console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', deliveryData);
      return null;

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', error);
      return null;
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Excel –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
   * @returns Array - –º–∞—Å—Å–∏–≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
   */
  private getMockExcelData(): Array<Array<string>> {
    return [
      [
        "01.09.25_77_00—á_–í–ò–ü_19",
        "3.32 –∫—É–±.–º/871 –∫–≥/1.010 –º/–ù–µ—Ç",
        "13908.–ó–∞–∫–∞–∑–∞–Ω–æ.01\\.09\\.2025 00:00:00.–ö—É–ª—É—à–æ–≤ –ú–∞—Ä–∞—Ç –®–∞–π–ª–æ–æ–±–∞–µ–≤–∏—á........01\\.09\\.2025 01:30:00..202",
        '–û–û–û "–ì–†–£–ó –°–ï–†–í–ò–°"'
      ],
      [
        "02.09.25_78_12—á_–°–¢–ê–ù–î–ê–†–¢_25",
        "2.15 –∫—É–±.–º/450 –∫–≥/0.850 –º/–î–∞",
        "13909.–ó–∞–∫–∞–∑–∞–Ω–æ.02\\.09\\.2025 12:00:00.–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á........02\\.09\\.2025 14:30:00..203",
        '–û–û–û "–ì–†–£–ó –°–ï–†–í–ò–°"'
      ],
      [
        "03.09.25_79_18—á_–≠–ö–°–ü–†–ï–°–°_31",
        "1.85 –∫—É–±.–º/320 –∫–≥/0.750 –º/–ù–µ—Ç",
        "13910.–ó–∞–∫–∞–∑–∞–Ω–æ.03\\.09\\.2025 18:00:00.–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á........03\\.09\\.2025 20:00:00..204",
        '–û–û–û "–ì–†–£–ó –°–ï–†–í–ò–°"'
      ]
    ];
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  formatProcessingResults(results: any): string {
    if (!results || !results.results) {
      return '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è';
    }

    const successful = results.results.filter((r: any) => r.success).length;
    const failed = results.results.filter((r: any) => !r.success).length;
    const total = results.results.length;

    let text = `üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞**\n\n`;
    text += `‚úÖ **–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** ${successful}\n`;
    text += `‚ùå **–û—à–∏–±–∫–∏:** ${failed}\n`;
    text += `üìã **–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫:** ${total}\n\n`;

    if (successful > 0) {
      text += `üöö **–°–æ–∑–¥–∞–Ω–æ —Ä–µ–π—Å–æ–≤:** ${results.tripsCreated || 0}\n`;
      text += `üì¶ **–°–æ–∑–¥–∞–Ω–æ –¥–æ—Å—Ç–∞–≤–æ–∫:** ${results.deliveriesCreated || 0}\n\n`;
    }

    if (failed > 0) {
      text += `‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:**\n`;
      results.results.filter((r: any) => !r.success).slice(0, 3).forEach((r: any, index: number) => {
        text += `${index + 1}. ${r.error}\n`;
      });
      if (failed > 3) {
        text += `... –∏ –µ—â–µ ${failed - 3} –æ—à–∏–±–æ–∫\n`;
      }
    }

    return text;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–π—Å—ã –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö Excel –¥–∞–Ω–Ω—ã—Ö
   */
  private async createTripsFromExcelData(parsedData: ParsedRowData[], driverId: number = 1): Promise<{ created: number; errors: string[] }> {
    const results = { created: 0, errors: [] as string[] };

    for (const data of parsedData) {
      try {
        if (data.cargo && data.order && data.route) {
          // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
          const routeInfo = `${data.route.date}_${data.route.time}_${data.route.type}_${data.route.number}`;
          
          // –°–æ–∑–¥–∞–µ–º —Ä–µ–π—Å
          const tripData = {
            driver_id: driverId,
            delivery_id: null,
            route_info: routeInfo,
            status: 'review' as any,
            notes: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –∏–∑ Excel. –ì—Ä—É–∑: ${data.cargo.volume} –∫—É–±.–º/${data.cargo.weight} –∫–≥. –ó–∞–∫–∞–∑: ${data.order.orderNumber || 'N/A'}`
          };

          await this.tripService.createTrip(tripData);
          results.created++;
        }
      } catch (error) {
        const errorMsg = `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Å–∞ –¥–ª—è —Å—Ç—Ä–æ–∫–∏: ${(error as any)?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
        results.errors.push(errorMsg);
        console.error(errorMsg, error);
      }
    }

    return results;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö Excel –¥–∞–Ω–Ω—ã—Ö
   */
  private async createDeliveriesFromExcelData(parsedData: ParsedRowData[]): Promise<{ created: number; errors: string[] }> {
    const results = { created: 0, errors: [] as string[] };

    for (const data of parsedData) {
      try {
        if (data.cargo && data.order && data.route) {
          // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º)
          results.created++;
        }
      } catch (error) {
        const errorMsg = `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Å—Ç—Ä–æ–∫–∏: ${(error as any)?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
        results.errors.push(errorMsg);
        console.error(errorMsg, error);
      }
    }

    return results;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private formatRowData(data: ParsedRowData): string {
    if (!data.cargo || !data.order || !data.route) {
      return '‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ';
    }

    return `üì¶ **–ì—Ä—É–∑:** ${data.cargo.volume} –∫—É–±.–º / ${data.cargo.weight} –∫–≥\n` +
           `üìã **–ó–∞–∫–∞–∑:** ${data.order.orderNumber || 'N/A'}\n` +
           `üë§ **–ö–ª–∏–µ–Ω—Ç:** ${data.order.customerName || 'N/A'}\n` +
           `üöö **–ú–∞—Ä—à—Ä—É—Ç:** ${data.route.date} ${data.route.time} ${data.route.type} ${data.route.number}\n` +
           `‚è∞ **–í—Ä–µ–º—è –ø–æ–≥—Ä—É–∑–∫–∏:** ${data.order.orderTime || 'N/A'}\n` +
           `‚è∞ **–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:** ${data.order.deliveryTime || 'N/A'}`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
   * @returns Promise<Object> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getProcessingStats(): Promise<any> {
    try {
      const allDeliveries = await this.deliveryService.getAllDeliveries();
      const totalDeliveries = allDeliveries.length;
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
      // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª–µ status –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏
      const pendingDeliveries = allDeliveries.filter(d => d.orderStatus === '–ó–∞–∫–∞–∑–∞–Ω–æ');
      const completedDeliveries = allDeliveries.filter(d => d.orderStatus === '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');

      return {
        total: totalDeliveries,
        pending: pendingDeliveries.length,
        completed: completedDeliveries.length,
        lastUpdated: new Date()
      };
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {
        total: 0,
        pending: 0,
        completed: 0,
        lastUpdated: new Date()
      };
    }
  }
}
