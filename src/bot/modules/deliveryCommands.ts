import { Bot, InlineKeyboard } from 'grammy';
import { DeliveryService } from '../../services/deliveryService.js';
import type { Delivery } from '../../models/Delivery.js';

export class DeliveryCommands {
  private deliveryService: DeliveryService;

  constructor(deliveryService: DeliveryService) {
    this.deliveryService = deliveryService;
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏
   */
  registerCommands(bot: Bot): void {
    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ—Å—Ç–∞–≤–æ–∫
    bot.command('deliveries', this.handleDeliveriesList.bind(this));
    bot.command('stats', this.handleDeliveryStats.bind(this));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
    bot.callbackQuery('deliveries_menu', this.handleDeliveriesMenu.bind(this));
    bot.callbackQuery('current_deliveries', this.handleCurrentDeliveries.bind(this));
    bot.callbackQuery('delivery_stats', this.handleDeliveryStats.bind(this));
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /deliveries
   */
  private async handleDeliveriesList(ctx: any): Promise<void> {
    try {
      const keyboard = new InlineKeyboard()
        .text('üöö –¢–µ–∫—É—â–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏', 'current_deliveries').row()
        .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'delivery_stats').row()
        .text('üìã –í—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏', 'all_deliveries');

      await ctx.reply(
        'üì¶ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏**\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–µ–Ω—é –¥–æ—Å—Ç–∞–≤–æ–∫:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –¥–æ—Å—Ç–∞–≤–æ–∫');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
   */
  private async handleDeliveryStats(ctx: any): Promise<void> {
    try {
      const stats = await this.deliveryService.getCargoStatistics();
      
      const text = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫**\n\n` +
                   `üì¶ **–í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫:** ${stats.totalDeliveries}\n` +
                   `üìè **–û–±—â–∏–π –æ–±—ä–µ–º:** ${stats.totalVolume} –∫—É–±.–º\n` +
                   `‚öñÔ∏è **–û–±—â–∏–π –≤–µ—Å:** ${stats.totalWeight} –∫–≥\n\n` +
                   `üìä **–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n` +
                   `üìè **–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º:** ${stats.averageVolume} –∫—É–±.–º\n` +
                   `‚öñÔ∏è **–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å:** ${stats.averageWeight} –∫–≥`;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ callback query
      if (ctx.callbackQuery) {
        const keyboard = new InlineKeyboard()
          .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'deliveries_menu');
        
        await ctx.editMessageText(text, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      } else {
        await ctx.reply(text, { parse_mode: 'Markdown' });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      if (ctx.callbackQuery) {
        await ctx.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      } else {
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –¥–æ—Å—Ç–∞–≤–æ–∫
   */
  private async handleDeliveriesMenu(ctx: any): Promise<void> {
    try {
      const keyboard = new InlineKeyboard()
        .text('üöö –¢–µ–∫—É—â–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏', 'current_deliveries').row()
        .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'delivery_stats').row()
        .text('üìã –í—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏', 'all_deliveries');

      await ctx.editMessageText(
        'üì¶ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏**\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–µ–Ω—é –¥–æ—Å—Ç–∞–≤–æ–∫:', error);
      await ctx.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –¥–æ—Å—Ç–∞–≤–æ–∫');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—É—â–∏—Ö –¥–æ—Å—Ç–∞–≤–æ–∫
   */
  private async handleCurrentDeliveries(ctx: any): Promise<void> {
    try {
      const currentDeliveries = await this.deliveryService.getCurrentDeliveries();
      
      if (currentDeliveries.length === 0) {
        const keyboard = new InlineKeyboard()
          .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'deliveries_menu');
        
        await ctx.editMessageText(
          'üì¶ **–¢–µ–∫—É—â–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏**\n\n' +
          '–ù–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∞–≤–æ–∫ –Ω–µ—Ç.',
          {
            parse_mode: 'Markdown',
            reply_markup: keyboard
          }
        );
        return;
      }

      let text = `üì¶ **–¢–µ–∫—É—â–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ (${currentDeliveries.length})**\n\n`;
      
      currentDeliveries.forEach((delivery, index) => {
        text += `**${index + 1}. –ó–∞–∫–∞–∑ ‚Ññ${delivery.orderNumber}**\n` +
                `üë§ ${delivery.customerName}\n` +
                `üì¶ ${delivery.cargoVolume} –∫—É–±.–º / ${delivery.cargoWeight} –∫–≥\n` +
                `‚è∞ ${delivery.deliveryTime}\n` +
                `üè¢ ${delivery.companyName}\n\n`;
      });

      const keyboard = new InlineKeyboard()
        .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'deliveries_menu');

      await ctx.editMessageText(text, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–æ—Å—Ç–∞–≤–æ–∫:', error);
      await ctx.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –¥–æ—Å—Ç–∞–≤–æ–∫');
    }
  }



  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private formatDelivery(delivery: Delivery): string {
    return `**üì¶ –ó–∞–∫–∞–∑ ‚Ññ${delivery.orderNumber}**\n` +
           `üë§ **–ö–ª–∏–µ–Ω—Ç:** ${delivery.customerName}\n` +
           `üì¶ **–ì—Ä—É–∑:** ${delivery.cargoVolume} –∫—É–±.–º / ${delivery.cargoWeight} –∫–≥\n` +
           `üìÖ **–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:** ${delivery.orderDate} ${delivery.orderTime}\n` +
           `üöö **–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:** ${delivery.deliveryDate} ${delivery.deliveryTime}\n` +
           `üè¢ **–ö–æ–º–ø–∞–Ω–∏—è:** ${delivery.companyName}`;
  }
}
