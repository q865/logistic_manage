import { Bot, InlineKeyboard } from 'grammy';

const WEBAPP_URL = process.env.WEBAPP_URL || 'http://localhost:5173';

export class MainCommands {
  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
   */
  registerCommands(bot: Bot): void {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    bot.command(['start', 'help'], this.handleStart.bind(this));
    bot.command('webapp', this.handleWebapp.bind(this));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
    bot.callbackQuery('open_webapp', this.handleWebapp.bind(this));
    bot.callbackQuery('main_menu', this.handleMainMenu.bind(this));
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help
   */
  private async handleStart(ctx: any): Promise<void> {
    try {
      const keyboard = new InlineKeyboard()
        .text('üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π', 'drivers_page_1').row()
        .text('üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã', 'schedule_current').row()
        .text('üöó –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã', 'current_trips').row()
        .text('üöö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞–º–∏', 'trips_menu').row()
        .text('üìä Excel —Ñ–∞–π–ª—ã', 'excel_menu').row()
        .text('üåê –í–µ–±-—Ñ–æ—Ä–º–∞', 'open_webapp').row()
        .text('üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', 'open_instructions');
      
      await ctx.reply(
        'üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Driver Bot!**\n\n' +
        'üöö **–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∞–º–∏**\n\n' +
        '**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n' +
        '‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏\n' +
        '‚Ä¢ üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã\n' +
        '‚Ä¢ üöó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞–º–∏\n' +
        '‚Ä¢ üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫\n' +
        '‚Ä¢ üìä Excel —Ñ–∞–π–ª—ã\n' +
        '‚Ä¢ üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:',
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã start:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /webapp
   */
  private async handleWebapp(ctx: any): Promise<void> {
    try {
      const keyboard = new InlineKeyboard()
        .url('üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-—Ñ–æ—Ä–º—É', WEBAPP_URL)
        .row()
        .text('‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu');

      await ctx.reply(
        'üåê **–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å**\n\n' +
        '–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-—Ñ–æ—Ä–º—É –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π:\n\n' +
        '**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:**\n' +
        '‚Ä¢ üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n' +
        '‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
        '‚Ä¢ üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –≥—Ä–∞—Ñ–∏–∫–∏\n' +
        '‚Ä¢ üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞–º–∏\n' +
        '‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏\n\n' +
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:',
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã webapp:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
   */
  private async handleMainMenu(ctx: any): Promise<void> {
    try {
      const keyboard = new InlineKeyboard()
        .text('üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π', 'drivers_page_1').row()
        .text('üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã', 'schedule_current').row()
        .text('üöó –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã', 'current_trips').row()
        .text('üöö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞–º–∏', 'trips_menu').row()
        .text('üìä Excel —Ñ–∞–π–ª—ã', 'excel_menu').row()
        .text('üåê –í–µ–±-—Ñ–æ—Ä–º–∞', 'open_webapp').row()
        .text('üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', 'open_instructions');

      await ctx.editMessageText(
        'üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:',
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', error);
      await ctx.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é');
    }
  }
}
