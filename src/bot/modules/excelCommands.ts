import { Bot, InlineKeyboard } from 'grammy';
import { DeliveryService } from '../../services/deliveryService.js';
import { ExcelProcessingService } from '../../services/excelProcessingService.js';

export class ExcelCommands {
  private deliveryService: DeliveryService;
  private excelProcessingService: ExcelProcessingService;

  constructor(deliveryService: DeliveryService, excelProcessingService: ExcelProcessingService) {
    this.deliveryService = deliveryService;
    this.excelProcessingService = excelProcessingService;
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel —Ñ–∞–π–ª–∞–º–∏
   */
  registerCommands(bot: Bot): void {
    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è Excel
    bot.command('excel', this.handleExcelMenu.bind(this));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
    bot.callbackQuery('excel_menu', this.handleExcelMenu.bind(this));
    bot.callbackQuery('excel_upload', this.handleExcelUpload.bind(this));
    bot.callbackQuery('excel_stats', this.handleExcelStats.bind(this));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    bot.on('message:document', this.handleDocumentUpload.bind(this));
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /excel
   */
  private async handleExcelMenu(ctx: any): Promise<void> {
    try {
      const keyboard = new InlineKeyboard()
        .text('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª', 'excel_upload').row()
        .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏', 'excel_stats').row()
        .text('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É', 'excel_instructions');

      await ctx.reply(
        'üìä **–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–æ–≤**\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–µ–Ω—é Excel:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é Excel');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞
   */
  private async handleExcelUpload(ctx: any): Promise<void> {
    try {
      const text = 'üì§ **–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞**\n\n' +
                   '1Ô∏è‚É£ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª** (.xlsx –∏–ª–∏ .xls)\n\n' +
                   'üìã **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n' +
                   '‚Ä¢ .xlsx (Excel 2007+)\n' +
                   '‚Ä¢ .xls (Excel 97-2003)\n\n' +
                   '‚ö†Ô∏è **–í–∞–∂–Ω–æ:**\n' +
                   '‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–∞—Ö\n' +
                   '‚Ä¢ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏\n' +
                   '‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 –ú–ë';

      const keyboard = new InlineKeyboard()
        .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'excel_menu');

      await ctx.editMessageText(text, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel:', error);
      await ctx.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Excel
   */
  private async handleExcelStats(ctx: any): Promise<void> {
    try {
      const stats = await this.excelProcessingService.getProcessingStats();
      
      const text = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel**\n\n` +
                   `üì¶ **–í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫:** ${stats.total}\n` +
                   `‚è≥ **–í –æ–±—Ä–∞–±–æ—Ç–∫–µ:** ${stats.pending}\n` +
                   `‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** ${stats.completed}\n` +
                   `üïê **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** ${stats.lastUpdated.toLocaleString('ru-RU')}`;

      const keyboard = new InlineKeyboard()
        .text('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'excel_menu');

      await ctx.editMessageText(text, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Excel:', error);
      await ctx.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  private async handleDocumentUpload(ctx: any): Promise<void> {
    try {
      const document = ctx.message?.document;
      
      if (!document) {
        await ctx.reply('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
      if (!document.file_name?.endsWith('.xlsx') && !document.file_name?.endsWith('.xls')) {
        await ctx.reply(
          '‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞**\n\n' +
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls).\n\n' +
          '**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n' +
          '‚Ä¢ .xlsx (Excel 2007+)\n' +
          '‚Ä¢ .xls (Excel 97-2003)',
          { parse_mode: 'Markdown' }
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10 –ú–ë)
      if (document.file_size && document.file_size > 10 * 1024 * 1024) {
        await ctx.reply(
          '‚ùå **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π**\n\n' +
          '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 10 –ú–ë\n' +
          '–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: ' + Math.round(document.file_size / 1024 / 1024 * 100) / 100 + ' –ú–ë',
          { parse_mode: 'Markdown' }
        );
        return;
      }

      await ctx.reply('‚è≥ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...', { parse_mode: 'Markdown' });

      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        const file = await ctx.getFile();
        const fileBuffer = await file.download();

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Excel —Ñ–∞–π–ª
        const deliveries = await this.deliveryService.loadFromExcel(fileBuffer);

        if (deliveries.length === 0) {
          await ctx.reply(
            '‚ö†Ô∏è **–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n' +
            '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
            '‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö\n' +
            '‚Ä¢ –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª\n' +
            '‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã',
            { parse_mode: 'Markdown' }
          );
          return;
        }

        const keyboard = new InlineKeyboard()
          .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'excel_stats')
          .text('üìã –í—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏', 'all_deliveries');

        await ctx.reply(
          `‚úÖ **–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**\n\n` +
          `üì¶ **–ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ—Å—Ç–∞–≤–æ–∫:** ${deliveries.length}\n` +
          `üìÖ **–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:** ${new Date().toLocaleString('ru-RU')}\n\n` +
          `–§–∞–π–ª: \`${document.file_name}\``,
          {
            parse_mode: 'Markdown',
            reply_markup: keyboard
          }
        );

      } catch (processingError) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞:', processingError);
        await ctx.reply(
          '‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞**\n\n' +
          '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
          '‚Ä¢ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª\n' +
          '‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç\n' +
          '‚Ä¢ –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö\n\n' +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–Ω–æ–≤–∞.',
          { parse_mode: 'Markdown' }
        );
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
    }
  }
}
