import { Bot, InlineKeyboard } from 'grammy';
import { DriverService } from '../../services/driverService.js';
import type { Driver } from '../../models/Driver.js';

const PAGE_LIMIT = 5;

export class DriverCommands {
  private driverService: DriverService;

  constructor(driverService: DriverService) {
    this.driverService = driverService;
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
   */
  registerCommands(bot: Bot): void {
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
    bot.command('drivers', this.handleDriversList.bind(this));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
    bot.callbackQuery(/^drivers_page_(\d+)$/, this.handleDriversPage.bind(this));
    bot.callbackQuery(/^driver_details_(\d+)$/, this.handleDriverDetails.bind(this));
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /drivers
   */
  private async handleDriversList(ctx: any): Promise<void> {
    try {
      const { text, keyboard } = await this.createDriversListMessage(1);
      await ctx.reply(text, { 
        parse_mode: 'Markdown',
        reply_markup: keyboard 
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
   */
  private async handleDriversPage(ctx: any): Promise<void> {
    try {
      const page = parseInt(ctx.match[1]);
      const { text, keyboard } = await this.createDriversListMessage(page);
      
      await ctx.editMessageText(text, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π:', error);
      await ctx.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –≤–æ–¥–∏—Ç–µ–ª—è
   */
  private async handleDriverDetails(ctx: any): Promise<void> {
    try {
      const driverId = parseInt(ctx.match[1]);
      const driver = await this.driverService.findDriverById(driverId);
      
      if (!driver) {
        await ctx.answer('‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const details = this.formatDriverDetails(driver);
      const keyboard = new InlineKeyboard()
        .text('‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'drivers_page_1');

      await ctx.editMessageText(details, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤–æ–¥–∏—Ç–µ–ª—è:', error);
      await ctx.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è');
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
   */
  private async createDriversListMessage(page = 1): Promise<{ text: string; keyboard: InlineKeyboard }> {
    const { drivers, total } = await this.driverService.getAllDrivers({ page, limit: PAGE_LIMIT });
    const totalPages = Math.ceil(total / PAGE_LIMIT) || 1;
    
    let text = `**üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page} –∏–∑ ${totalPages})**\n\n`;
    
    if (total === 0) {
      text = '‚ùå –í–æ–¥–∏—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.';
    } else {
      text += drivers.map(d => 
        `*ID:* ${d.id} | *–§–ò–û:* ${d.personalData.lastName} ${d.personalData.firstName}\n` +
        `*–ê–≤—Ç–æ:* ${d.vehicle.make} ${d.vehicle.model} (${d.vehicle.licensePlate})`
      ).join('\n--------------------\n');
    }
    
    const keyboard = new InlineKeyboard();
    if (page > 1) keyboard.text('‚óÄÔ∏è –ù–∞–∑–∞–¥', `drivers_page_${page - 1}`);
    if (page < totalPages) keyboard.text('–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è', `drivers_page_${page + 1}`);
    
    return { text, keyboard };
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private formatDriverDetails(driver: Driver): string {
    return `**üë§ –í–æ–¥–∏—Ç–µ–ª—å ID: ${driver.id}**\n` +
           `*–§–ò–û:* ${driver.personalData.lastName} ${driver.personalData.firstName} ${driver.personalData.patronymic || ''}\n` +
           `*–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${new Date(driver.personalData.birthDate).toLocaleDateString('ru-RU')}\n\n` +
           `**üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å**\n` +
           `*–ú–∞—Ä–∫–∞/–ú–æ–¥–µ–ª—å:* ${driver.vehicle.make} ${driver.vehicle.model}\n` +
           `*–ì–æ—Å. –Ω–æ–º–µ—Ä:* ${driver.vehicle.licensePlate}`;
  }
}
