#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–π—Å–æ–≤
 * –ó–∞–ø—É—Å–∫: node test_trip_api.mjs
 */

const API_BASE = 'http://localhost:3000/api/trips';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testTrip = {
  driver_id: 1,
  route_info: '01.09.25_77_00—á_–í–ò–ü_19 - –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç',
  status: 'review',
  notes: '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–π—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API'
};

async function testTripAPI() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ä–µ–π—Å–æ–≤...\n');

  try {
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–π—Å–∞
    console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–π—Å–∞...');
    const createResponse = await fetch(API_BASE, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testTrip)
    });
    
    const createResult = await createResponse.json();
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ:', createResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');
    
    if (!createResult.success) {
      console.log('‚ùå –û—à–∏–±–∫–∞:', createResult.error);
      return;
    }
    
    const tripId = createResult.data.id;
    console.log(`üìù –°–æ–∑–¥–∞–Ω —Ä–µ–π—Å —Å ID: ${tripId}\n`);

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Å–∞ –ø–æ ID
    console.log('2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Å–∞ –ø–æ ID...');
    const getResponse = await fetch(`${API_BASE}/${tripId}`);
    const getResult = await getResponse.json();
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ:', getResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');
    if (getResult.success) {
      console.log('üìã –î–∞–Ω–Ω—ã–µ —Ä–µ–π—Å–∞:', JSON.stringify(getResult.data, null, 2));
    }
    console.log('');

    // 3. –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞
    console.log('3Ô∏è‚É£ –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–π—Å–∞...');
    const statusResponse = await fetch(`${API_BASE}/${tripId}/status`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status: 'with_driver' })
    });
    
    const statusResult = await statusResponse.json();
    console.log('‚úÖ –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞:', statusResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');
    if (statusResult.success) {
      console.log('üîÑ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:', statusResult.data.status);
    }
    console.log('');

    // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Å–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è
    console.log('4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Å–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è...');
    const driverResponse = await fetch(`${API_BASE}/driver/1`);
    const driverResult = await driverResponse.json();
    console.log('‚úÖ –†–µ–π—Å—ã –≤–æ–¥–∏—Ç–µ–ª—è:', driverResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');
    if (driverResult.success) {
      console.log(`üöó –ù–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å–æ–≤: ${driverResult.count}`);
    }
    console.log('');

    // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤
    console.log('5Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤...');
    const allResponse = await fetch(API_BASE);
    const allResult = await allResponse.json();
    console.log('‚úÖ –í—Å–µ —Ä–µ–π—Å—ã:', allResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');
    if (allResult.success) {
      console.log(`üìä –í—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤: ${allResult.pagination.total}`);
      console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${allResult.pagination.page}/${allResult.pagination.totalPages}`);
    }
    console.log('');

    // 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞
    console.log('6Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞...');
    const updateResponse = await fetch(`${API_BASE}/${tripId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        notes: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∫ —Ä–µ–π—Å—É',
        status: 'verified'
      })
    });
    
    const updateResult = await updateResponse.json();
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', updateResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');
    if (updateResult.success) {
      console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(updateResult.data, null, 2));
    }
    console.log('');

    // 7. –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞
    console.log('7Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞...');
    const deleteResponse = await fetch(`${API_BASE}/${tripId}`, {
      method: 'DELETE'
    });
    
    const deleteResult = await deleteResponse.json();
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ:', deleteResult.success ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê');
    console.log('');

    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (import.meta.url === `file://${process.argv[1]}`) {
  testTripAPI();
}
