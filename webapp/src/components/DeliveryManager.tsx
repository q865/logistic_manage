import React, { useState, useCallback, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  CardHeader,
  Typography,
  Button,
  Grid,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  Alert,
  CircularProgress,
  IconButton,
  Tooltip,
  TextField,
  InputAdornment,
  Divider,
  useMediaQuery,
  useTheme
} from '@mui/material';
import {
  Upload as UploadIcon,
  Download as DownloadIcon,
  Search as SearchIcon,
  Refresh as RefreshIcon,
  Delete as DeleteIcon,
  Visibility as ViewIcon,
  TrendingUp as StatsIcon,
  Schedule as ScheduleIcon
} from '@mui/icons-material';
import axios from 'axios';

const API_URL = 'http://localhost:3000/api/deliveries';

interface Delivery {
  id?: number;
  identifier: string;
  cargoVolume: number;
  cargoWeight: number;
  cargoLength: number;
  cargoAdditionalInfo: string;
  orderNumber: number;
  orderStatus: string;
  orderDate: string;
  orderTime: string;
  customerName: string;
  deliveryDate: string;
  deliveryTime: string;
  deliveryId: number;
  companyName: string;
  createdAt?: Date;
  updatedAt?: Date;
}

interface CargoStatistics {
  totalVolume: number;
  totalWeight: number;
  totalDeliveries: number;
  averageVolume: number;
  averageWeight: number;
}

export function DeliveryManager() {
  const [deliveries, setDeliveries] = useState<Delivery[]>([]);
  const [statistics, setStatistics] = useState<CargoStatistics | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedDate, setSelectedDate] = useState('');
  const [fileUploading, setFileUploading] = useState(false);
  
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  const fetchDeliveries = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      const response = await axios.get(API_URL);
      setDeliveries(response.data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∞–≤–æ–∫:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–∞—Ö');
    } finally {
      setLoading(false);
    }
  }, []);

  const fetchStatistics = useCallback(async () => {
    try {
      const response = await axios.get(`${API_URL}/statistics`);
      setStatistics(response.data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
    }
  }, []);

  const loadData = useCallback(async () => {
    await Promise.all([fetchDeliveries(), fetchStatistics()]);
  }, [fetchDeliveries, fetchStatistics]);

  useEffect(() => {
    loadData();
  }, [loadData]);

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    if (!file.name.endsWith('.xlsx') && !file.name.endsWith('.xls')) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel (.xlsx –∏–ª–∏ .xls)');
      return;
    }

    try {
      setFileUploading(true);
      setError(null);
      setSuccess(null);

      const formData = new FormData();
      formData.append('excel', file);

      const response = await axios.post(`${API_URL}/upload`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      setSuccess(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${response.data.count} –¥–æ—Å—Ç–∞–≤–æ–∫!`);
      await loadData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', err);
      setError(err.response?.data?.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞');
    } finally {
      setFileUploading(false);
      // –û—á–∏—â–∞–µ–º input
      event.target.value = '';
    }
  };

  const handleSearch = useCallback(async () => {
    if (!searchTerm.trim()) {
      await fetchDeliveries();
      return;
    }

    try {
      setLoading(true);
      setError(null);
      const response = await axios.get(`${API_URL}/search?customer=${encodeURIComponent(searchTerm)}`);
      setDeliveries(response.data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', err);
      setError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫');
    } finally {
      setLoading(false);
    }
  }, [searchTerm, fetchDeliveries]);

  const handleDateFilter = useCallback(async () => {
    if (!selectedDate) {
      await fetchDeliveries();
      return;
    }

    try {
      setLoading(true);
      setError(null);
      const response = await axios.get(`${API_URL}/date/${selectedDate}`);
      setDeliveries(response.data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ:', err);
      setError('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ');
    } finally {
      setLoading(false);
    }
  }, [selectedDate, fetchDeliveries]);

  const handleExport = async () => {
    try {
      const response = await axios.get(`${API_URL}/export`, {
        responseType: 'blob',
      });

      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', 'deliveries.json');
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', err);
      setError('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
    }
  };

  const handleClearData = async () => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–∞—Ö? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      return;
    }

    try {
      await axios.delete(API_URL);
      setSuccess('–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–∞—Ö –æ—á–∏—â–µ–Ω—ã');
      await loadData();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
      setError('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
  };

  const filteredDeliveries = deliveries.filter(delivery =>
    delivery.customerName.toLowerCase().includes(searchTerm.toLowerCase()) ||
    delivery.identifier.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const currentDeliveries = deliveries.filter(delivery => {
    const today = new Date().toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
    return delivery.deliveryDate === today;
  });

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" component="h1" gutterBottom sx={{ 
        background: 'linear-gradient(135deg, #1976d2 0%, #42a5f5 100%)',
        backgroundClip: 'text',
        WebkitBackgroundClip: 'text',
        WebkitTextFillColor: 'transparent',
        fontWeight: 'bold',
        mb: 4
      }}>
        üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏
      </Typography>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {statistics && (
        <Card sx={{ mb: 3, background: 'linear-gradient(135deg, #f8fafc 0%, #e3f2fd 100%)' }}>
          <CardHeader 
            title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–∑–æ–≤" 
            avatar={<StatsIcon sx={{ color: '#1976d2' }} />}
          />
          <CardContent>
            <Grid container spacing={3}>
              <Grid item xs={6} sm={3}>
                <Box textAlign="center">
                  <Typography variant="h4" color="primary" fontWeight="bold">
                    {statistics.totalDeliveries}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫
                  </Typography>
                </Box>
              </Grid>
              <Grid item xs={6} sm={3}>
                <Box textAlign="center">
                  <Typography variant="h4" color="primary" fontWeight="bold">
                    {statistics.totalVolume}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –û–±—â–∏–π –æ–±—ä–µ–º (–∫—É–±.–º)
                  </Typography>
                </Box>
              </Grid>
              <Grid item xs={6} sm={3}>
                <Box textAlign="center">
                  <Typography variant="h4" color="primary" fontWeight="bold">
                    {statistics.totalWeight}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –û–±—â–∏–π –≤–µ—Å (–∫–≥)
                  </Typography>
                </Box>
              </Grid>
              <Grid item xs={6} sm={3}>
                <Box textAlign="center">
                  <Typography variant="h4" color="primary" fontWeight="bold">
                    {statistics.averageVolume}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º (–∫—É–±.–º)
                  </Typography>
                </Box>
              </Grid>
            </Grid>
          </CardContent>
        </Card>
      )}

      {/* –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã */}
      {currentDeliveries.length > 0 && (
        <Card sx={{ mb: 3, background: 'linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%)' }}>
          <CardHeader 
            title="üöö –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã (—Å–µ–≥–æ–¥–Ω—è)" 
            avatar={<ScheduleIcon sx={{ color: '#2e7d32' }} />}
          />
          <CardContent>
            <Grid container spacing={2}>
              {currentDeliveries.slice(0, 3).map((delivery, index) => (
                <Grid item xs={12} sm={4} key={index}>
                  <Paper sx={{ p: 2, background: 'rgba(255,255,255,0.7)' }}>
                    <Typography variant="h6" fontWeight="bold" gutterBottom>
                      {delivery.customerName}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      üì¶ {delivery.cargoVolume} –∫—É–±.–º / {delivery.cargoWeight} –∫–≥
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      ‚è∞ –ü–æ–≥—Ä—É–∑–∫–∞: {delivery.orderTime}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery.deliveryTime}
                    </Typography>
                  </Paper>
                </Grid>
              ))}
            </Grid>
          </CardContent>
        </Card>
      )}

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
      <Card sx={{ mb: 3 }}>
        <CardHeader title="üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏" />
        <CardContent>
          <Grid container spacing={2} alignItems="center">
            <Grid item xs={12} sm={4}>
              <input
                accept=".xlsx,.xls"
                style={{ display: 'none' }}
                id="excel-file-upload"
                type="file"
                onChange={handleFileUpload}
              />
              <label htmlFor="excel-file-upload">
                <Button
                  variant="contained"
                  component="span"
                  startIcon={<UploadIcon />}
                  disabled={fileUploading}
                  sx={{ 
                    background: 'linear-gradient(135deg, #1976d2 0%, #42a5f5 100%)',
                    '&:hover': { background: 'linear-gradient(135deg, #1565c0 0%, #1976d2 100%)' }
                  }}
                >
                  {fileUploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel'}
                </Button>
              </label>
            </Grid>
            <Grid item xs={12} sm={2}>
              <Button
                variant="outlined"
                startIcon={<DownloadIcon />}
                onClick={handleExport}
                disabled={deliveries.length === 0}
              >
                –≠–∫—Å–ø–æ—Ä—Ç
              </Button>
            </Grid>
            <Grid item xs={12} sm={2}>
              <Button
                variant="outlined"
                color="error"
                startIcon={<DeleteIcon />}
                onClick={handleClearData}
                disabled={deliveries.length === 0}
              >
                –û—á–∏—Å—Ç–∏—Ç—å
              </Button>
            </Grid>
            <Grid item xs={12} sm={2}>
              <Button
                variant="outlined"
                startIcon={<RefreshIcon />}
                onClick={loadData}
              >
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
            </Grid>
          </Grid>
        </CardContent>
      </Card>

      {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
      <Card sx={{ mb: 3 }}>
        <CardHeader title="üîç –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã" />
        <CardContent>
          <Grid container spacing={2} alignItems="center">
            <Grid item xs={12} sm={4}>
              <TextField
                fullWidth
                label="–ü–æ–∏—Å–∫ –ø–æ –∫–ª–∏–µ–Ω—Ç—É –∏–ª–∏ ID"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <SearchIcon />
                    </InputAdornment>
                  ),
                }}
              />
            </Grid>
            <Grid item xs={12} sm={3}>
              <TextField
                fullWidth
                label="–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ"
                type="date"
                value={selectedDate}
                onChange={(e) => setSelectedDate(e.target.value)}
                InputLabelProps={{ shrink: true }}
              />
            </Grid>
            <Grid item xs={12} sm={2}>
              <Button
                variant="contained"
                onClick={handleSearch}
                disabled={!searchTerm.trim()}
              >
                –ù–∞–π—Ç–∏
              </Button>
            </Grid>
            <Grid item xs={12} sm={2}>
              <Button
                variant="outlined"
                onClick={handleDateFilter}
                disabled={!selectedDate}
              >
                –§–∏–ª—å—Ç—Ä
              </Button>
            </Grid>
          </Grid>
        </CardContent>
      </Card>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∏ —É—Å–ø–µ—Ö–µ */}
      {error && (
        <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError(null)}>
          {error}
        </Alert>
      )}
      {success && (
        <Alert severity="success" sx={{ mb: 3 }} onClose={() => setSuccess(null)}>
          {success}
        </Alert>
      )}

      {/* –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–æ–∫ */}
      <Card>
        <CardHeader 
          title={`üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–æ–∫ (${filteredDeliveries.length})`}
          action={
            <Typography variant="body2" color="text.secondary">
              –ü–æ–∫–∞–∑–∞–Ω–æ: {filteredDeliveries.length} –∏–∑ {deliveries.length}
            </Typography>
          }
        />
        <CardContent>
          {loading ? (
            <Box display="flex" justifyContent="center" p={3}>
              <CircularProgress />
            </Box>
          ) : filteredDeliveries.length === 0 ? (
            <Box textAlign="center" p={3}>
              <Typography variant="body1" color="text.secondary">
                {deliveries.length === 0 
                  ? '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫ –ø—É—Å—Ç–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.'
                  : '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'
                }
              </Typography>
            </Box>
          ) : (
            <TableContainer component={Paper} sx={{ maxHeight: 600 }}>
              <Table stickyHeader>
                <TableHead>
                  <TableRow>
                    <TableCell>ID</TableCell>
                    <TableCell>–ö–ª–∏–µ–Ω—Ç</TableCell>
                    <TableCell>–ì—Ä—É–∑</TableCell>
                    <TableCell>–í—Ä–µ–º—è –ø–æ–≥—Ä—É–∑–∫–∏</TableCell>
                    <TableCell>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏</TableCell>
                    <TableCell>–î–µ–π—Å—Ç–≤–∏—è</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {filteredDeliveries.map((delivery) => (
                    <TableRow key={delivery.id || delivery.identifier} hover>
                      <TableCell>
                        <Chip 
                          label={delivery.deliveryId} 
                          size="small" 
                          color="primary" 
                          variant="outlined"
                        />
                      </TableCell>
                      <TableCell>
                        <Typography variant="body2" fontWeight="medium">
                          {delivery.customerName}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {delivery.identifier}
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Typography variant="body2">
                          {delivery.cargoVolume} –∫—É–±.–º
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {delivery.cargoWeight} –∫–≥
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Typography variant="body2">
                          {delivery.orderDate}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {delivery.orderTime}
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Typography variant="body2">
                          {delivery.deliveryDate}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {delivery.deliveryTime}
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Tooltip title="–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π">
                          <IconButton size="small" color="primary">
                            <ViewIcon />
                          </IconButton>
                        </Tooltip>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </CardContent>
      </Card>
    </Box>
  );
}
